// Initially generated by process_ioctls.py
ioctl!(none apm_ioc_standby with b'A', 1);
ioctl!(none apm_ioc_suspend with b'A', 2);
// ioctl!(write btrfs_ioc_add_dev with BTRFS_IOCTL_MAGIC, 10; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(write btrfs_ioc_balance with BTRFS_IOCTL_MAGIC, 12; /*struct*/ btrfs_ioctl_vol_args);
ioctl!(write btrfs_ioc_balance_ctl with BTRFS_IOCTL_MAGIC, 33; ::std::os::raw::c_int);
// ioctl!(read btrfs_ioc_balance_progress with BTRFS_IOCTL_MAGIC, 34; /*struct*/ btrfs_ioctl_balance_args);
// ioctl!(readwrite btrfs_ioc_balance_v2 with BTRFS_IOCTL_MAGIC, 32; /*struct*/ btrfs_ioctl_balance_args);
ioctl!(write btrfs_ioc_clone with BTRFS_IOCTL_MAGIC, 9; ::std::os::raw::c_int);
// ioctl!(write btrfs_ioc_clone_range with BTRFS_IOCTL_MAGIC, 13; /*struct*/ btrfs_ioctl_clone_range_args);
ioctl!(write btrfs_ioc_default_subvol with BTRFS_IOCTL_MAGIC, 19; u64);
// ioctl!(write btrfs_ioc_defrag with BTRFS_IOCTL_MAGIC, 2; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(write btrfs_ioc_defrag_range with BTRFS_IOCTL_MAGIC, 16; /*struct*/ btrfs_ioctl_defrag_range_args);
// ioctl!(read btrfs_ioc_devices_ready with BTRFS_IOCTL_MAGIC, 39; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(readwrite btrfs_ioc_dev_info with BTRFS_IOCTL_MAGIC, 30; /*struct*/ btrfs_ioctl_dev_info_args);
// ioctl!(readwrite btrfs_ioc_dev_replace with BTRFS_IOCTL_MAGIC, 53; /*struct*/ btrfs_ioctl_dev_replace_args);
// ioctl!(readwrite btrfs_ioc_file_extent_same with BTRFS_IOCTL_MAGIC, 54; /*struct*/ btrfs_ioctl_same_args);
// ioctl!(read btrfs_ioc_fs_info with BTRFS_IOCTL_MAGIC, 31; /*struct*/ btrfs_ioctl_fs_info_args);
// ioctl!(readwrite btrfs_ioc_get_dev_stats with BTRFS_IOCTL_MAGIC, 52; /*struct*/ btrfs_ioctl_get_dev_stats);
// ioctl!(read btrfs_ioc_get_features with BTRFS_IOCTL_MAGIC, 57; /*struct*/ btrfs_ioctl_feature_flags);
ioctl!(read btrfs_ioc_get_fslabel with BTRFS_IOCTL_MAGIC, 49; [::std::os::raw::c_char; BTRFS_LABEL_SIZE]);
// ioctl!(read btrfs_ioc_get_supported_features with BTRFS_IOCTL_MAGIC, 57; [/*struct*/ btrfs_ioctl_feature_flags; 3]);
// ioctl!(readwrite btrfs_ioc_ino_lookup with BTRFS_IOCTL_MAGIC, 18; /*struct*/ btrfs_ioctl_ino_lookup_args);
// ioctl!(readwrite btrfs_ioc_ino_paths with BTRFS_IOCTL_MAGIC, 35; /*struct*/ btrfs_ioctl_ino_path_args);
// ioctl!(readwrite btrfs_ioc_logical_ino with BTRFS_IOCTL_MAGIC, 36; /*struct*/ btrfs_ioctl_ino_path_args);
// ioctl!(write btrfs_ioc_qgroup_assign with BTRFS_IOCTL_MAGIC, 41; /*struct*/ btrfs_ioctl_qgroup_assign_args);
// ioctl!(write btrfs_ioc_qgroup_create with BTRFS_IOCTL_MAGIC, 42; /*struct*/ btrfs_ioctl_qgroup_create_args);
// ioctl!(read btrfs_ioc_qgroup_limit with BTRFS_IOCTL_MAGIC, 43; /*struct*/ btrfs_ioctl_qgroup_limit_args);
// ioctl!(readwrite btrfs_ioc_quota_ctl with BTRFS_IOCTL_MAGIC, 40; /*struct*/ btrfs_ioctl_quota_ctl_args);
// ioctl!(write btrfs_ioc_quota_rescan with BTRFS_IOCTL_MAGIC, 44; /*struct*/ btrfs_ioctl_quota_rescan_args);
// ioctl!(read btrfs_ioc_quota_rescan_status with BTRFS_IOCTL_MAGIC, 45; /*struct*/ btrfs_ioctl_quota_rescan_args);
ioctl!(none btrfs_ioc_quota_rescan_wait with BTRFS_IOCTL_MAGIC, 46);
// ioctl!(write btrfs_ioc_resize with BTRFS_IOCTL_MAGIC, 3; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(write btrfs_ioc_rm_dev with BTRFS_IOCTL_MAGIC, 11; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(write btrfs_ioc_scan_dev with BTRFS_IOCTL_MAGIC, 4; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(readwrite btrfs_ioc_scrub with BTRFS_IOCTL_MAGIC, 27; /*struct*/ btrfs_ioctl_scrub_args);
ioctl!(none btrfs_ioc_scrub_cancel with BTRFS_IOCTL_MAGIC, 28);
// ioctl!(readwrite btrfs_ioc_scrub_progress with BTRFS_IOCTL_MAGIC, 29; /*struct*/ btrfs_ioctl_scrub_args);
// ioctl!(write btrfs_ioc_send with BTRFS_IOCTL_MAGIC, 38; /*struct*/ btrfs_ioctl_send_args);
// ioctl!(write btrfs_ioc_set_features with BTRFS_IOCTL_MAGIC, 57; [/*struct*/ btrfs_ioctl_feature_flags; 2]);
ioctl!(write btrfs_ioc_set_fslabel with BTRFS_IOCTL_MAGIC, 50; [::std::os::raw::c_char; BTRFS_LABEL_SIZE]);
// ioctl!(readwrite btrfs_ioc_set_received_subvol with BTRFS_IOCTL_MAGIC, 37; /*struct*/ btrfs_ioctl_received_subvol_args);
// ioctl!(write btrfs_ioc_snap_create with BTRFS_IOCTL_MAGIC, 1; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(write btrfs_ioc_snap_create_v2 with BTRFS_IOCTL_MAGIC, 23; /*struct*/ btrfs_ioctl_vol_args_v2);
// ioctl!(write btrfs_ioc_snap_destroy with BTRFS_IOCTL_MAGIC, 15; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(readwrite btrfs_ioc_space_info with BTRFS_IOCTL_MAGIC, 20; /*struct*/ btrfs_ioctl_space_args);
ioctl!(read btrfs_ioc_start_sync with BTRFS_IOCTL_MAGIC, 24; u64);
// ioctl!(write btrfs_ioc_subvol_create with BTRFS_IOCTL_MAGIC, 14; /*struct*/ btrfs_ioctl_vol_args);
// ioctl!(write btrfs_ioc_subvol_create_v2 with BTRFS_IOCTL_MAGIC, 24; /*struct*/ btrfs_ioctl_vol_args_v2);
ioctl!(read btrfs_ioc_subvol_getflags with BTRFS_IOCTL_MAGIC, 25; u64);
ioctl!(write btrfs_ioc_subvol_setflags with BTRFS_IOCTL_MAGIC, 26; u64);
ioctl!(none btrfs_ioc_sync with BTRFS_IOCTL_MAGIC, 8);
ioctl!(none btrfs_ioc_trans_end with BTRFS_IOCTL_MAGIC, 7);
ioctl!(none btrfs_ioc_trans_start with BTRFS_IOCTL_MAGIC, 6);
// ioctl!(readwrite btrfs_ioc_tree_search with BTRFS_IOCTL_MAGIC, 17; /*struct*/ btrfs_ioctl_search_args);
// ioctl!(readwrite btrfs_ioc_tree_search_v2 with BTRFS_IOCTL_MAGIC, 17; /*struct*/ btrfs_ioctl_search_args_v2);
ioctl!(write btrfs_ioc_wait_sync with BTRFS_IOCTL_MAGIC, 22; u64);
ioctl!(none cm_iocardoff with CM_IOC_MAGIC, 4);
// ioctl!(readwrite cm_iocgatr with CM_IOC_MAGIC, 1; *mut FIXME1<['atreq_t']>);
ioctl!(read cm_iocgstatus with CM_IOC_MAGIC, 0; *mut ::libc::c_uchar);
// ioctl!(write cm_iocspts with CM_IOC_MAGIC, 2; *mut FIXME1<['ptsreq_t']>);
ioctl!(none cm_iocsrdr with CM_IOC_MAGIC, 3);
ioctl!(read cxl_ioctl_get_process_element with CXL_MAGIC, 0x01; u32);
// ioctl!(write cxl_ioctl_start_work with CXL_MAGIC, 0x00; /*struct*/ cxl_ioctl_start_work);
// ioctl!(readwrite drm_ioctl_add_bufs with DRM_IOCTL_BASE, 0x16; /*struct*/ drm_buf_desc);
// ioctl!(readwrite drm_ioctl_add_ctx with DRM_IOCTL_BASE, 0x20; /*struct*/ drm_ctx);
// ioctl!(readwrite drm_ioctl_add_draw with DRM_IOCTL_BASE, 0x27; /*struct*/ drm_draw);
// ioctl!(readwrite drm_ioctl_add_map with DRM_IOCTL_BASE, 0x15; /*struct*/ drm_map);
ioctl!(none drm_ioctl_agp_acquire with DRM_IOCTL_BASE, 0x30);
// ioctl!(readwrite drm_ioctl_agp_alloc with DRM_IOCTL_BASE, 0x34; /*struct*/ drm_agp_buffer);
// ioctl!(write drm_ioctl_agp_bind with DRM_IOCTL_BASE, 0x36; /*struct*/ drm_agp_binding);
// ioctl!(write drm_ioctl_agp_enable with DRM_IOCTL_BASE, 0x32; /*struct*/ drm_agp_mode);
// ioctl!(write drm_ioctl_agp_free with DRM_IOCTL_BASE, 0x35; /*struct*/ drm_agp_buffer);
// ioctl!(read drm_ioctl_agp_info with DRM_IOCTL_BASE, 0x33; /*struct*/ drm_agp_info);
ioctl!(none drm_ioctl_agp_release with DRM_IOCTL_BASE, 0x31);
// ioctl!(write drm_ioctl_agp_unbind with DRM_IOCTL_BASE, 0x37; /*struct*/ drm_agp_binding);
// ioctl!(write drm_ioctl_auth_magic with DRM_IOCTL_BASE, 0x11; /*struct*/ drm_auth);
// ioctl!(readwrite drm_ioctl_block with DRM_IOCTL_BASE, 0x12; /*struct*/ drm_block);
// ioctl!(write drm_ioctl_control with DRM_IOCTL_BASE, 0x14; /*struct*/ drm_control);
// ioctl!(readwrite drm_ioctl_dma with DRM_IOCTL_BASE, 0x29; /*struct*/ drm_dma);
ioctl!(none drm_ioctl_drop_master with DRM_IOCTL_BASE, 0x1f);
// ioctl!(write drm_ioctl_finish with DRM_IOCTL_BASE, 0x2c; /*struct*/ drm_lock);
// ioctl!(write drm_ioctl_free_bufs with DRM_IOCTL_BASE, 0x1a; /*struct*/ drm_buf_free);
// ioctl!(write drm_ioctl_gem_close with DRM_IOCTL_BASE, 0x09; /*struct*/ drm_gem_close);
// ioctl!(readwrite drm_ioctl_gem_flink with DRM_IOCTL_BASE, 0x0a; /*struct*/ drm_gem_flink);
// ioctl!(readwrite drm_ioctl_gem_open with DRM_IOCTL_BASE, 0x0b; /*struct*/ drm_gem_open);
// ioctl!(readwrite drm_ioctl_get_cap with DRM_IOCTL_BASE, 0x0c; /*struct*/ drm_get_cap);
// ioctl!(readwrite drm_ioctl_get_client with DRM_IOCTL_BASE, 0x05; /*struct*/ drm_client);
// ioctl!(readwrite drm_ioctl_get_ctx with DRM_IOCTL_BASE, 0x23; /*struct*/ drm_ctx);
// ioctl!(read drm_ioctl_get_magic with DRM_IOCTL_BASE, 0x02; /*struct*/ drm_auth);
// ioctl!(readwrite drm_ioctl_get_map with DRM_IOCTL_BASE, 0x04; /*struct*/ drm_map);
// ioctl!(readwrite drm_ioctl_get_sarea_ctx with DRM_IOCTL_BASE, 0x1d; /*struct*/ drm_ctx_priv_map);
// ioctl!(read drm_ioctl_get_stats with DRM_IOCTL_BASE, 0x06; /*struct*/ drm_stats);
// ioctl!(readwrite drm_ioctl_get_unique with DRM_IOCTL_BASE, 0x01; /*struct*/ drm_unique);
// ioctl!(readwrite drm_ioctl_info_bufs with DRM_IOCTL_BASE, 0x18; /*struct*/ drm_buf_info);
// ioctl!(readwrite drm_ioctl_irq_busid with DRM_IOCTL_BASE, 0x03; /*struct*/ drm_irq_busid);
// ioctl!(write drm_ioctl_lock with DRM_IOCTL_BASE, 0x2a; /*struct*/ drm_lock);
// ioctl!(readwrite drm_ioctl_map_bufs with DRM_IOCTL_BASE, 0x19; /*struct*/ drm_buf_map);
// ioctl!(write drm_ioctl_mark_bufs with DRM_IOCTL_BASE, 0x17; /*struct*/ drm_buf_desc);
// ioctl!(write drm_ioctl_modeset_ctl with DRM_IOCTL_BASE, 0x08; /*struct*/ drm_modeset_ctl);
// ioctl!(readwrite drm_ioctl_mode_addfb with DRM_IOCTL_BASE, 0xAE; /*struct*/ drm_mode_fb_cmd);
// ioctl!(readwrite drm_ioctl_mode_addfb2 with DRM_IOCTL_BASE, 0xB8; /*struct*/ drm_mode_fb_cmd2);
// ioctl!(readwrite drm_ioctl_mode_attachmode with DRM_IOCTL_BASE, 0xA8; /*struct*/ drm_mode_mode_cmd);
// ioctl!(readwrite drm_ioctl_mode_create_dumb with DRM_IOCTL_BASE, 0xB2; /*struct*/ drm_mode_create_dumb);
// ioctl!(readwrite drm_ioctl_mode_cursor with DRM_IOCTL_BASE, 0xA3; /*struct*/ drm_mode_cursor);
// ioctl!(readwrite drm_ioctl_mode_cursor2 with DRM_IOCTL_BASE, 0xBB; /*struct*/ drm_mode_cursor2);
// ioctl!(readwrite drm_ioctl_mode_destroy_dumb with DRM_IOCTL_BASE, 0xB4; /*struct*/ drm_mode_destroy_dumb);
// ioctl!(readwrite drm_ioctl_mode_detachmode with DRM_IOCTL_BASE, 0xA9; /*struct*/ drm_mode_mode_cmd);
// ioctl!(readwrite drm_ioctl_mode_dirtyfb with DRM_IOCTL_BASE, 0xB1; /*struct*/ drm_mode_fb_dirty_cmd);
// ioctl!(readwrite drm_ioctl_mode_getconnector with DRM_IOCTL_BASE, 0xA7; /*struct*/ drm_mode_get_connector);
// ioctl!(readwrite drm_ioctl_mode_getcrtc with DRM_IOCTL_BASE, 0xA1; /*struct*/ drm_mode_crtc);
// ioctl!(readwrite drm_ioctl_mode_getencoder with DRM_IOCTL_BASE, 0xA6; /*struct*/ drm_mode_get_encoder);
// ioctl!(readwrite drm_ioctl_mode_getfb with DRM_IOCTL_BASE, 0xAD; /*struct*/ drm_mode_fb_cmd);
// ioctl!(readwrite drm_ioctl_mode_getgamma with DRM_IOCTL_BASE, 0xA4; /*struct*/ drm_mode_crtc_lut);
// ioctl!(readwrite drm_ioctl_mode_getplane with DRM_IOCTL_BASE, 0xB6; /*struct*/ drm_mode_get_plane);
// ioctl!(readwrite drm_ioctl_mode_getplaneresources with DRM_IOCTL_BASE, 0xB5; /*struct*/ drm_mode_get_plane_res);
// ioctl!(readwrite drm_ioctl_mode_getpropblob with DRM_IOCTL_BASE, 0xAC; /*struct*/ drm_mode_get_blob);
// ioctl!(readwrite drm_ioctl_mode_getproperty with DRM_IOCTL_BASE, 0xAA; /*struct*/ drm_mode_get_property);
// ioctl!(readwrite drm_ioctl_mode_getresources with DRM_IOCTL_BASE, 0xA0; /*struct*/ drm_mode_card_res);
// ioctl!(readwrite drm_ioctl_mode_map_dumb with DRM_IOCTL_BASE, 0xB3; /*struct*/ drm_mode_map_dumb);
// ioctl!(readwrite drm_ioctl_mode_obj_getproperties with DRM_IOCTL_BASE, 0xB9; /*struct*/ drm_mode_obj_get_properties);
// ioctl!(readwrite drm_ioctl_mode_obj_setproperty with DRM_IOCTL_BASE, 0xBA; /*struct*/ drm_mode_obj_set_property);
// ioctl!(readwrite drm_ioctl_mode_page_flip with DRM_IOCTL_BASE, 0xB0; /*struct*/ drm_mode_crtc_page_flip);
ioctl!(readwrite drm_ioctl_mode_rmfb with DRM_IOCTL_BASE, 0xAF; ::libc::c_uint);
// ioctl!(readwrite drm_ioctl_mode_setcrtc with DRM_IOCTL_BASE, 0xA2; /*struct*/ drm_mode_crtc);
// ioctl!(readwrite drm_ioctl_mode_setgamma with DRM_IOCTL_BASE, 0xA5; /*struct*/ drm_mode_crtc_lut);
// ioctl!(readwrite drm_ioctl_mode_setplane with DRM_IOCTL_BASE, 0xB7; /*struct*/ drm_mode_set_plane);
// ioctl!(readwrite drm_ioctl_mode_setproperty with DRM_IOCTL_BASE, 0xAB; /*struct*/ drm_mode_connector_set_property);
// ioctl!(write drm_ioctl_mod_ctx with DRM_IOCTL_BASE, 0x22; /*struct*/ drm_ctx);
// ioctl!(write drm_ioctl_new_ctx with DRM_IOCTL_BASE, 0x25; /*struct*/ drm_ctx);
// ioctl!(readwrite drm_ioctl_prime_fd_to_handle with DRM_IOCTL_BASE, 0x2e; /*struct*/ drm_prime_handle);
// ioctl!(readwrite drm_ioctl_prime_handle_to_fd with DRM_IOCTL_BASE, 0x2d; /*struct*/ drm_prime_handle);
// ioctl!(readwrite drm_ioctl_radeon_alloc with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_ALLOC; FIXME1<['drm_radeon_mem_alloc_t']>);
// ioctl!(write drm_ioctl_radeon_clear with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_CLEAR; FIXME1<['drm_radeon_clear_t']>);
// ioctl!(write drm_ioctl_radeon_cmdbuf with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_CMDBUF; FIXME1<['drm_radeon_cmd_buffer_t']>);
ioctl!(none drm_ioctl_radeon_cp_idle with DRM_IOCTL_BASE, DRM_COMMAND_BASE);
// ioctl!(write drm_ioctl_radeon_cp_init with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_CP_INIT; FIXME1<['drm_radeon_init_t']>);
ioctl!(none drm_ioctl_radeon_cp_reset with DRM_IOCTL_BASE, DRM_COMMAND_BASE);
ioctl!(none drm_ioctl_radeon_cp_resume with DRM_IOCTL_BASE, DRM_COMMAND_BASE);
ioctl!(none drm_ioctl_radeon_cp_start with DRM_IOCTL_BASE, DRM_COMMAND_BASE);
// ioctl!(write drm_ioctl_radeon_cp_stop with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_CP_STOP; FIXME1<['drm_radeon_cp_stop_t']>);
// ioctl!(readwrite drm_ioctl_radeon_cs with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_CS; /*struct*/ drm_radeon_cs);
ioctl!(none drm_ioctl_radeon_flip with DRM_IOCTL_BASE, DRM_COMMAND_BASE);
// ioctl!(write drm_ioctl_radeon_free with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_FREE; FIXME1<['drm_radeon_mem_free_t']>);
// ioctl!(write drm_ioctl_radeon_fullscreen with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_FULLSCREEN; FIXME1<['drm_radeon_fullscreen_t']>);
// ioctl!(readwrite drm_ioctl_radeon_gem_busy with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_BUSY; /*struct*/ drm_radeon_gem_busy);
// ioctl!(readwrite drm_ioctl_radeon_gem_create with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_CREATE; /*struct*/ drm_radeon_gem_create);
// ioctl!(readwrite drm_ioctl_radeon_gem_get_tiling with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_GET_TILING; /*struct*/ drm_radeon_gem_get_tiling);
// ioctl!(readwrite drm_ioctl_radeon_gem_info with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_INFO; /*struct*/ drm_radeon_gem_info);
// ioctl!(readwrite drm_ioctl_radeon_gem_mmap with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_MMAP; /*struct*/ drm_radeon_gem_mmap);
// ioctl!(readwrite drm_ioctl_radeon_gem_op with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_OP; /*struct*/ drm_radeon_gem_op);
// ioctl!(readwrite drm_ioctl_radeon_gem_pread with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_PREAD; /*struct*/ drm_radeon_gem_pread);
// ioctl!(readwrite drm_ioctl_radeon_gem_pwrite with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_PWRITE; /*struct*/ drm_radeon_gem_pwrite);
// ioctl!(readwrite drm_ioctl_radeon_gem_set_domain with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_SET_DOMAIN; /*struct*/ drm_radeon_gem_set_domain);
// ioctl!(readwrite drm_ioctl_radeon_gem_set_tiling with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_SET_TILING; /*struct*/ drm_radeon_gem_set_tiling);
// ioctl!(readwrite drm_ioctl_radeon_gem_va with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_VA; /*struct*/ drm_radeon_gem_va);
// ioctl!(write drm_ioctl_radeon_gem_wait_idle with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GEM_WAIT_IDLE; /*struct*/ drm_radeon_gem_wait_idle);
// ioctl!(readwrite drm_ioctl_radeon_getparam with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_GETPARAM; FIXME1<['drm_radeon_getparam_t']>);
// ioctl!(write drm_ioctl_radeon_indices with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_INDICES; FIXME1<['drm_radeon_indices_t']>);
// ioctl!(readwrite drm_ioctl_radeon_indirect with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_INDIRECT; FIXME1<['drm_radeon_indirect_t']>);
// ioctl!(readwrite drm_ioctl_radeon_info with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_INFO; /*struct*/ drm_radeon_info);
// ioctl!(write drm_ioctl_radeon_init_heap with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_INIT_HEAP; FIXME1<['drm_radeon_mem_init_heap_t']>);
// ioctl!(readwrite drm_ioctl_radeon_irq_emit with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_IRQ_EMIT; FIXME1<['drm_radeon_irq_emit_t']>);
// ioctl!(write drm_ioctl_radeon_irq_wait with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_IRQ_WAIT; FIXME1<['drm_radeon_irq_wait_t']>);
ioctl!(none drm_ioctl_radeon_reset with DRM_IOCTL_BASE, DRM_COMMAND_BASE);
// ioctl!(write drm_ioctl_radeon_setparam with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_SETPARAM; FIXME1<['drm_radeon_setparam_t']>);
// ioctl!(write drm_ioctl_radeon_stipple with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_STIPPLE; FIXME1<['drm_radeon_stipple_t']>);
// ioctl!(write drm_ioctl_radeon_surf_alloc with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_SURF_ALLOC; FIXME1<['drm_radeon_surface_alloc_t']>);
// ioctl!(write drm_ioctl_radeon_surf_free with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_SURF_FREE; FIXME1<['drm_radeon_surface_free_t']>);
ioctl!(none drm_ioctl_radeon_swap with DRM_IOCTL_BASE, DRM_COMMAND_BASE);
// ioctl!(readwrite drm_ioctl_radeon_texture with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_TEXTURE; FIXME1<['drm_radeon_texture_t']>);
// ioctl!(write drm_ioctl_radeon_vertex with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_VERTEX; FIXME1<['drm_radeon_vertex_t']>);
// ioctl!(write drm_ioctl_radeon_vertex2 with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_RADEON_VERTEX2; FIXME1<['drm_radeon_vertex2_t']>);
// ioctl!(readwrite drm_ioctl_res_ctx with DRM_IOCTL_BASE, 0x26; /*struct*/ drm_ctx_res);
// ioctl!(readwrite drm_ioctl_rm_ctx with DRM_IOCTL_BASE, 0x21; /*struct*/ drm_ctx);
// ioctl!(readwrite drm_ioctl_rm_draw with DRM_IOCTL_BASE, 0x28; /*struct*/ drm_draw);
// ioctl!(write drm_ioctl_rm_map with DRM_IOCTL_BASE, 0x1b; /*struct*/ drm_map);
// ioctl!(write drm_ioctl_set_client_cap with DRM_IOCTL_BASE, 0x0d; /*struct*/ drm_set_client_cap);
ioctl!(none drm_ioctl_set_master with DRM_IOCTL_BASE, 0x1e);
// ioctl!(write drm_ioctl_set_sarea_ctx with DRM_IOCTL_BASE, 0x1c; /*struct*/ drm_ctx_priv_map);
// ioctl!(write drm_ioctl_set_unique with DRM_IOCTL_BASE, 0x10; /*struct*/ drm_unique);
// ioctl!(readwrite drm_ioctl_set_version with DRM_IOCTL_BASE, 0x07; /*struct*/ drm_set_version);
// ioctl!(readwrite drm_ioctl_sg_alloc with DRM_IOCTL_BASE, 0x38; /*struct*/ drm_scatter_gather);
// ioctl!(write drm_ioctl_sg_free with DRM_IOCTL_BASE, 0x39; /*struct*/ drm_scatter_gather);
// ioctl!(readwrite drm_ioctl_sis_agp_alloc with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_SIS_AGP_ALLOC; FIXME1<['drm_sis_mem_t']>);
// ioctl!(write drm_ioctl_sis_agp_free with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_SIS_AGP_FREE; FIXME1<['drm_sis_mem_t']>);
// ioctl!(readwrite drm_ioctl_sis_agp_init with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_SIS_AGP_INIT; FIXME1<['drm_sis_agp_t']>);
// ioctl!(readwrite drm_ioctl_sis_fb_alloc with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_SIS_FB_ALLOC; FIXME1<['drm_sis_mem_t']>);
// ioctl!(write drm_ioctl_sis_fb_free with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_SIS_FB_FREE; FIXME1<['drm_sis_mem_t']>);
// ioctl!(write drm_ioctl_sis_fb_init with DRM_IOCTL_BASE, DRM_COMMAND_BASE + DRM_SIS_FB_INIT; FIXME1<['drm_sis_fb_t']>);
// ioctl!(write drm_ioctl_switch_ctx with DRM_IOCTL_BASE, 0x24; /*struct*/ drm_ctx);
// ioctl!(readwrite drm_ioctl_unblock with DRM_IOCTL_BASE, 0x13; /*struct*/ drm_block);
// ioctl!(write drm_ioctl_unlock with DRM_IOCTL_BASE, 0x2b; /*struct*/ drm_lock);
// ioctl!(write drm_ioctl_update_draw with DRM_IOCTL_BASE, 0x3f; /*struct*/ drm_update_draw);
// ioctl!(readwrite drm_ioctl_version with DRM_IOCTL_BASE, 0x00; /*struct*/ drm_version);
// ioctl!(readwrite drm_ioctl_wait_vblank with DRM_IOCTL_BASE, 0x3a; FIXME2<['union', 'drm_wait_vblank']>);
ioctl!(read eviocgeffects with b'E', 0x84; ::std::os::raw::c_int);
ioctl!(read eviocgid with b'E', 0x02; /*struct*/ input_id);
ioctl!(read eviocgkeycode with b'E', 0x04; [::libc::c_uint; 2]);
// ioctl!(read eviocgkeycode_v2 with b'E', 0x04; /*struct*/ input_keymap_entry);
ioctl!(read eviocgrep with b'E', 0x03; [::libc::c_uint; 2]);
ioctl!(read eviocgversion with b'E', 0x01; ::std::os::raw::c_int);
ioctl!(write eviocrmff with b'E', 0x81; ::std::os::raw::c_int);
// TODO #define EVIOCSFF _IOC ( _IOC_WRITE , 'E' , 0x80 , sizeof ( struct ff_effect ) )
ioctl!(write eviocskeycode with b'E', 0x04; [::libc::c_uint; 2]);
// ioctl!(write eviocskeycode_v2 with b'E', 0x04; /*struct*/ input_keymap_entry);
ioctl!(write eviocsrep with b'E', 0x03; [::libc::c_uint; 2]);
ioctl!(read ext2_ioc_getflags with b'f', 1; ::std::os::raw::c_long);
ioctl!(read ext2_ioc_getversion with b'v', 1; ::std::os::raw::c_long);
ioctl!(read ext2_ioc_getversion_new with b'f', 3; ::std::os::raw::c_long);
// ioctl!(write ext2_ioc_group_add with b'f', 8; /*struct*/ ext2_new_group_input);
ioctl!(write ext2_ioc_group_extend with b'f', 7; ::libc::c_ulong);
ioctl!(write ext2_ioc_setflags with b'f', 2; ::std::os::raw::c_long);
ioctl!(write ext2_ioc_setversion with b'v', 2; ::std::os::raw::c_long);
ioctl!(write ext2_ioc_setversion_new with b'f', 4; ::std::os::raw::c_long);
// ioctl!(write ext4_ioc_group_add with b'f', 8; /*struct*/ ext4_new_group_input);
ioctl!(write ext4_ioc_resize_fs with b'f', 16; u64);
ioctl!(read fat_ioctl_get_attributes with b'r', 0x10; u32);
ioctl!(read fat_ioctl_get_volume_id with b'r', 0x13; u32);
ioctl!(write fat_ioctl_set_attributes with b'r', 0x11; u32);
// ioctl!(readwrite fsl_hv_ioctl_doorbell with FSL_HV_IOCTL_TYPE, 6; /*struct*/ fsl_hv_ioctl_doorbell);
// ioctl!(readwrite fsl_hv_ioctl_getprop with FSL_HV_IOCTL_TYPE, 7; /*struct*/ fsl_hv_ioctl_prop);
// ioctl!(readwrite fsl_hv_ioctl_memcpy with FSL_HV_IOCTL_TYPE, 5; /*struct*/ fsl_hv_ioctl_memcpy);
// ioctl!(readwrite fsl_hv_ioctl_partition_get_status with FSL_HV_IOCTL_TYPE, 2; /*struct*/ fsl_hv_ioctl_status);
// ioctl!(readwrite fsl_hv_ioctl_partition_restart with FSL_HV_IOCTL_TYPE, 1; /*struct*/ fsl_hv_ioctl_restart);
// ioctl!(readwrite fsl_hv_ioctl_partition_start with FSL_HV_IOCTL_TYPE, 3; /*struct*/ fsl_hv_ioctl_start);
// ioctl!(readwrite fsl_hv_ioctl_partition_stop with FSL_HV_IOCTL_TYPE, 4; /*struct*/ fsl_hv_ioctl_stop);
// ioctl!(readwrite fsl_hv_ioctl_setprop with FSL_HV_IOCTL_TYPE, 8; /*struct*/ fsl_hv_ioctl_prop);
ioctl!(read fs_ioc32_getflags with b'f', 1; ::std::os::raw::c_int);
ioctl!(read fs_ioc32_getversion with b'v', 1; ::std::os::raw::c_int);
ioctl!(write fs_ioc32_setflags with b'f', 2; ::std::os::raw::c_int);
ioctl!(write fs_ioc32_setversion with b'v', 2; ::std::os::raw::c_int);
// ioctl!(readwrite fs_ioc_fiemap with b'f', 11; /*struct*/ fiemap);
ioctl!(read fs_ioc_getflags with b'f', 1; ::std::os::raw::c_long);
ioctl!(read fs_ioc_getversion with b'v', 1; ::std::os::raw::c_long);
ioctl!(write fs_ioc_setflags with b'f', 2; ::std::os::raw::c_long);
ioctl!(write fs_ioc_setversion with b'v', 2; ::std::os::raw::c_long);
// ioctl!(readwrite fw_cdev_ioc_add_descriptor with b'#', 0x06; /*struct*/ fw_cdev_add_descriptor);
// ioctl!(readwrite fw_cdev_ioc_allocate with b'#', 0x02; /*struct*/ fw_cdev_allocate);
// ioctl!(readwrite fw_cdev_ioc_allocate_iso_resource with b'#', 0x0d; /*struct*/ fw_cdev_allocate_iso_resource);
// ioctl!(write fw_cdev_ioc_allocate_iso_resource_once with b'#', 0x0f; /*struct*/ fw_cdev_allocate_iso_resource);
// ioctl!(readwrite fw_cdev_ioc_create_iso_context with b'#', 0x08; /*struct*/ fw_cdev_create_iso_context);
// ioctl!(write fw_cdev_ioc_deallocate with b'#', 0x03; /*struct*/ fw_cdev_deallocate);
// ioctl!(write fw_cdev_ioc_deallocate_iso_resource with b'#', 0x0e; /*struct*/ fw_cdev_deallocate);
// ioctl!(write fw_cdev_ioc_deallocate_iso_resource_once with b'#', 0x10; /*struct*/ fw_cdev_allocate_iso_resource);
// ioctl!(write fw_cdev_ioc_flush_iso with b'#', 0x18; /*struct*/ fw_cdev_flush_iso);
// ioctl!(read fw_cdev_ioc_get_cycle_timer with b'#', 0x0c; /*struct*/ fw_cdev_get_cycle_timer);
// ioctl!(readwrite fw_cdev_ioc_get_cycle_timer2 with b'#', 0x14; /*struct*/ fw_cdev_get_cycle_timer2);
// ioctl!(readwrite fw_cdev_ioc_get_info with b'#', 0x00; /*struct*/ fw_cdev_get_info);
ioctl!(none fw_cdev_ioc_get_speed with b'#', 0x11);
// ioctl!(write fw_cdev_ioc_initiate_bus_reset with b'#', 0x05; /*struct*/ fw_cdev_initiate_bus_reset);
// ioctl!(readwrite fw_cdev_ioc_queue_iso with b'#', 0x09; /*struct*/ fw_cdev_queue_iso);
// ioctl!(write fw_cdev_ioc_receive_phy_packets with b'#', 0x16; /*struct*/ fw_cdev_receive_phy_packets);
// ioctl!(write fw_cdev_ioc_remove_descriptor with b'#', 0x07; /*struct*/ fw_cdev_remove_descriptor);
// ioctl!(write fw_cdev_ioc_send_broadcast_request with b'#', 0x12; /*struct*/ fw_cdev_send_request);
// ioctl!(readwrite fw_cdev_ioc_send_phy_packet with b'#', 0x15; /*struct*/ fw_cdev_send_phy_packet);
// ioctl!(write fw_cdev_ioc_send_request with b'#', 0x01; /*struct*/ fw_cdev_send_request);
// ioctl!(write fw_cdev_ioc_send_response with b'#', 0x04; /*struct*/ fw_cdev_send_response);
// ioctl!(write fw_cdev_ioc_send_stream_packet with b'#', 0x13; /*struct*/ fw_cdev_send_stream_packet);
// ioctl!(write fw_cdev_ioc_set_iso_channels with b'#', 0x17; /*struct*/ fw_cdev_set_iso_channels);
// ioctl!(write fw_cdev_ioc_start_iso with b'#', 0x0a; /*struct*/ fw_cdev_start_iso);
// ioctl!(write fw_cdev_ioc_stop_iso with b'#', 0x0b; /*struct*/ fw_cdev_stop_iso);
ioctl!(none hidiocapplication with b'H', 0x02);
// ioctl!(write hidiocgcollectionindex with b'H', 0x10; /*struct*/ hiddev_usage_ref);
// ioctl!(readwrite hidiocgcollectioninfo with b'H', 0x11; /*struct*/ hiddev_collection_info);
// ioctl!(read hidiocgdevinfo with b'H', 0x03; /*struct*/ hiddev_devinfo);
// TODO #define HIDIOCGFEATURE ( len ) _IOC ( _IOC_WRITE | _IOC_READ , 'H' , 0x07 , len )
// ioctl!(readwrite hidiocgfieldinfo with b'H', 0x0A; /*struct*/ hiddev_field_info);
ioctl!(read hidiocgflag with b'H', 0x0E; ::std::os::raw::c_int);
// TODO #define HIDIOCGNAME ( len ) _IOC ( _IOC_READ , 'H' , 0x06 , len )
// TODO #define HIDIOCGPHYS ( len ) _IOC ( _IOC_READ , 'H' , 0x12 , len )
// ioctl!(read hidiocgrawinfo with b'H', 0x03; /*struct*/ hidraw_devinfo);
// TODO #define HIDIOCGRAWNAME ( len ) _IOC ( _IOC_READ , 'H' , 0x04 , len )
// TODO #define HIDIOCGRAWPHYS ( len ) _IOC ( _IOC_READ , 'H' , 0x05 , len )
// ioctl!(read hidiocgrdesc with b'H', 0x02; /*struct*/ hidraw_report_descriptor);
ioctl!(read hidiocgrdescsize with b'H', 0x01; ::std::os::raw::c_int);
// ioctl!(write hidiocgreport with b'H', 0x07; /*struct*/ hiddev_report_info);
// ioctl!(readwrite hidiocgreportinfo with b'H', 0x09; /*struct*/ hiddev_report_info);
// ioctl!(read hidiocgstring with b'H', 0x04; /*struct*/ hiddev_string_descriptor);
// ioctl!(readwrite hidiocgucode with b'H', 0x0D; /*struct*/ hiddev_usage_ref);
// ioctl!(readwrite hidiocgusage with b'H', 0x0B; /*struct*/ hiddev_usage_ref);
// ioctl!(readwrite hidiocgusages with b'H', 0x13; /*struct*/ hiddev_usage_ref_multi);
ioctl!(read hidiocgversion with b'H', 0x01; ::std::os::raw::c_int);
ioctl!(none hidiocinitreport with b'H', 0x05);
// TODO #define HIDIOCSFEATURE ( len ) _IOC ( _IOC_WRITE | _IOC_READ , 'H' , 0x06 , len )
ioctl!(write hidiocsflag with b'H', 0x0F; ::std::os::raw::c_int);
// ioctl!(write hidiocsreport with b'H', 0x08; /*struct*/ hiddev_report_info);
// ioctl!(write hidiocsusage with b'H', 0x0C; /*struct*/ hiddev_usage_ref);
// ioctl!(write hidiocsusages with b'H', 0x14; /*struct*/ hiddev_usage_ref_multi);
ioctl!(none iiocdbgvar with b'I', 127);
ioctl!(none iiocdrvctl with b'I', 128);
ioctl!(none iiocgetcps with b'I', 21);
ioctl!(none iiocgetdvr with b'I', 22);
ioctl!(none iiocgetmap with b'I', 17);
ioctl!(none iiocgetprf with b'I', 15);
ioctl!(none iiocgetset with b'I', 8);
ioctl!(none iiocnetaif with b'I', 1);
ioctl!(none iiocnetaln with b'I', 32);
ioctl!(none iiocnetanm with b'I', 5);
ioctl!(none iiocnetasl with b'I', 19);
ioctl!(none iiocnetdif with b'I', 2);
ioctl!(none iiocnetdil with b'I', 20);
ioctl!(none iiocnetdln with b'I', 33);
ioctl!(none iiocnetdnm with b'I', 6);
ioctl!(none iiocnetdwrset with b'I', 24);
ioctl!(none iiocnetgcf with b'I', 4);
ioctl!(none iiocnetgnm with b'I', 7);
ioctl!(none iiocnetgpn with b'I', 34);
ioctl!(none iiocnethup with b'I', 11);
ioctl!(none iiocnetlcr with b'I', 23);
ioctl!(none iiocnetscf with b'I', 3);
ioctl!(none iiocsetbrj with b'I', 13);
ioctl!(none iiocsetgst with b'I', 12);
ioctl!(none iiocsetmap with b'I', 18);
ioctl!(none iiocsetprf with b'I', 16);
ioctl!(none iiocsetset with b'I', 9);
ioctl!(none iiocsetver with b'I', 10);
ioctl!(none iiocsigprf with b'I', 14);
// TODO #define IOCTL_EVTCHN_BIND_INTERDOMAIN _IOC ( _IOC_NONE , 'E' , 1 , sizeof ( struct ioctl_evtchn_bind_interdomain ) )
// TODO #define IOCTL_EVTCHN_BIND_UNBOUND_PORT _IOC ( _IOC_NONE , 'E' , 2 , sizeof ( struct ioctl_evtchn_bind_unbound_port ) )
// TODO #define IOCTL_EVTCHN_BIND_VIRQ _IOC ( _IOC_NONE , 'E' , 0 , sizeof ( struct ioctl_evtchn_bind_virq ) )
// TODO #define IOCTL_EVTCHN_NOTIFY _IOC ( _IOC_NONE , 'E' , 4 , sizeof ( struct ioctl_evtchn_notify ) )
// TODO #define IOCTL_EVTCHN_RESET _IOC ( _IOC_NONE , 'E' , 5 , 0 )
// TODO #define IOCTL_EVTCHN_UNBIND _IOC ( _IOC_NONE , 'E' , 3 , sizeof ( struct ioctl_evtchn_unbind ) )
// ioctl!(readwrite ioctl_mei_connect_client with b'H', 0x01; /*struct*/ mei_connect_client_data);
ioctl!(read ioctl_wdm_max_command with b'H', 0xA0; u16);
// ioctl!(write ivtvfb_ioc_dma_frame with b'V', BASE_VIDIOC_PRIVATE + 0; /*struct*/ ivtvfb_dma_frame);
// ioctl!(write ivtv_ioc_dma_frame with b'V', BASE_VIDIOC_PRIVATE + 0; /*struct*/ ivtv_dma_frame);
ioctl!(write ivtv_ioc_passthrough_mode with b'V', BASE_VIDIOC_PRIVATE + 1; ::std::os::raw::c_int);
ioctl!(read jsiocgaxes with b'j', 0x11; u8);
ioctl!(read jsiocgaxmap with b'j', 0x32; [u8; ABS_CNT]);
// ioctl!(read jsiocgbtnmap with b'j', 0x34; [FIXME3<['__u16', '[', 'KEY_MAX', '-', 'BTN_MISC']>; 1]);
ioctl!(read jsiocgbuttons with b'j', 0x12; u8);
// ioctl!(read jsiocgcorr with b'j', 0x22; /*struct*/ js_corr);
// TODO #define JSIOCGNAME ( len ) _IOC ( _IOC_READ , 'j' , 0x13 , len )
ioctl!(read jsiocgversion with b'j', 0x01; u32);
ioctl!(write jsiocsaxmap with b'j', 0x31; [u8; ABS_CNT]);
// ioctl!(write jsiocsbtnmap with b'j', 0x33; [FIXME3<['__u16', '[', 'KEY_MAX', '-', 'BTN_MISC']>; 1]);
// ioctl!(write jsiocscorr with b'j', 0x21; /*struct*/ js_corr);
ioctl!(none kiocsound with 75, 47);
// ioctl!(readwrite media_ioc_device_info with b'|', 0x00; /*struct*/ media_device_info);
// ioctl!(readwrite media_ioc_enum_entities with b'|', 0x01; /*struct*/ media_entity_desc);
// ioctl!(readwrite media_ioc_enum_links with b'|', 0x02; /*struct*/ media_links_enum);
// ioctl!(readwrite media_ioc_setup_link with b'|', 0x03; /*struct*/ media_link_desc);
// ioctl!(read meyeioc_g_params with b'v', BASE_VIDIOC_PRIVATE + 0; /*struct*/ meye_params);
ioctl!(write meyeioc_qbuf_capt with b'v', BASE_VIDIOC_PRIVATE + 2; ::std::os::raw::c_int);
ioctl!(none meyeioc_stillcapt with b'v', BASE_VIDIOC_PRIVATE);
ioctl!(read meyeioc_stilljcapt with b'v', BASE_VIDIOC_PRIVATE + 5; ::std::os::raw::c_int);
ioctl!(readwrite meyeioc_sync with b'v', BASE_VIDIOC_PRIVATE + 3; ::std::os::raw::c_int);
// ioctl!(write meyeioc_s_params with b'v', BASE_VIDIOC_PRIVATE + 1; /*struct*/ meye_params);
ioctl!(none mgsl_iocclrmodcount with MGSL_MAGIC_IOC, 15);
// ioctl!(read mgsl_iocggpio with MGSL_MAGIC_IOC, 17; /*struct*/ gpio_desc);
ioctl!(none mgsl_iocgif with MGSL_MAGIC_IOC, 11);
// ioctl!(read mgsl_iocgparams with MGSL_MAGIC_IOC, 1; /*struct*/ _MGSL_PARAMS);
ioctl!(none mgsl_iocgstats with MGSL_MAGIC_IOC, 7);
ioctl!(none mgsl_iocgtxidle with MGSL_MAGIC_IOC, 3);
ioctl!(none mgsl_iocgxctrl with MGSL_MAGIC_IOC, 22);
ioctl!(none mgsl_iocgxsync with MGSL_MAGIC_IOC, 20);
ioctl!(none mgsl_ioclooptxdone with MGSL_MAGIC_IOC, 9);
ioctl!(none mgsl_iocrxenable with MGSL_MAGIC_IOC, 5);
// ioctl!(write mgsl_iocsgpio with MGSL_MAGIC_IOC, 16; /*struct*/ gpio_desc);
ioctl!(none mgsl_iocsif with MGSL_MAGIC_IOC, 10);
// ioctl!(write mgsl_iocsparams with MGSL_MAGIC_IOC, 0; /*struct*/ _MGSL_PARAMS);
ioctl!(none mgsl_iocstxidle with MGSL_MAGIC_IOC, 2);
ioctl!(none mgsl_iocsxctrl with MGSL_MAGIC_IOC, 21);
ioctl!(none mgsl_iocsxsync with MGSL_MAGIC_IOC, 19);
ioctl!(none mgsl_ioctxabort with MGSL_MAGIC_IOC, 6);
ioctl!(none mgsl_ioctxenable with MGSL_MAGIC_IOC, 4);
ioctl!(readwrite mgsl_iocwaitevent with MGSL_MAGIC_IOC, 8; ::std::os::raw::c_int);
// ioctl!(readwrite mgsl_iocwaitgpio with MGSL_MAGIC_IOC, 18; /*struct*/ gpio_desc);
// ioctl!(readwrite mmc_ioc_cmd with MMC_BLOCK_MAJOR, 0; /*struct*/ mmc_ioc_cmd);
// ioctl!(read mtiocget with b'm', 2; /*struct*/ mtget);
// ioctl!(read mtiocget with b'm', 2; /*struct*/ mtget);
// ioctl!(read mtiocgetconfig with b'm', 4; /*struct*/ mtconfiginfo);
// ioctl!(read mtiocpos with b'm', 3; /*struct*/ mtpos);
// ioctl!(read mtiocpos with b'm', 3; /*struct*/ mtpos);
// ioctl!(write mtiocsetconfig with b'm', 5; /*struct*/ mtconfiginfo);
// ioctl!(write mtioctop with b'm', 1; /*struct*/ mtop);
// ioctl!(write mtioctop with b'm', 1; /*struct*/ mtop);
// ioctl!(write mtrrioc_add_entry with MTRR_IOCTL_BASE, 0; /*struct*/ mtrr_sentry);
// ioctl!(write mtrrioc_add_page_entry with MTRR_IOCTL_BASE, 5; /*struct*/ mtrr_sentry);
// ioctl!(write mtrrioc_del_entry with MTRR_IOCTL_BASE, 2; /*struct*/ mtrr_sentry);
// ioctl!(write mtrrioc_del_page_entry with MTRR_IOCTL_BASE, 7; /*struct*/ mtrr_sentry);
// ioctl!(readwrite mtrrioc_get_entry with MTRR_IOCTL_BASE, 3; /*struct*/ mtrr_gentry);
// ioctl!(readwrite mtrrioc_get_page_entry with MTRR_IOCTL_BASE, 8; /*struct*/ mtrr_gentry);
// ioctl!(write mtrrioc_kill_entry with MTRR_IOCTL_BASE, 4; /*struct*/ mtrr_sentry);
// ioctl!(write mtrrioc_kill_page_entry with MTRR_IOCTL_BASE, 9; /*struct*/ mtrr_sentry);
// ioctl!(write mtrrioc_set_entry with MTRR_IOCTL_BASE, 1; /*struct*/ mtrr_sentry);
// ioctl!(write mtrrioc_set_page_entry with MTRR_IOCTL_BASE, 6; /*struct*/ mtrr_sentry);
// ioctl!(readwrite nvme_ioctl_admin_cmd with b'N', 0x41; /*struct*/ nvme_admin_cmd);
ioctl!(none nvme_ioctl_id with b'N', 0x40);
// ioctl!(write nvme_ioctl_submit_io with b'N', 0x42; /*struct*/ nvme_user_io);
ioctl!(read osiocgnetaddr with DECNET_IOCTL_BASE, 0xe1; ::std::os::raw::c_int);
ioctl!(write osiocsnetaddr with DECNET_IOCTL_BASE, 0xe0; ::std::os::raw::c_int);
ioctl!(none pciioc_controller with 73, 0);
ioctl!(none pciioc_mmap_is_io with 73, 1);
ioctl!(none pciioc_mmap_is_mem with 73, 2);
ioctl!(none pciioc_write_combine with 73, 3);
ioctl!(none perf_event_ioc_disable with b'$', 1);
ioctl!(none perf_event_ioc_enable with b'$', 0);
ioctl!(read perf_event_ioc_id with b'$', 7; *mut u64);
ioctl!(write perf_event_ioc_period with b'$', 4; u64);
ioctl!(none perf_event_ioc_refresh with b'$', 2);
ioctl!(none perf_event_ioc_reset with b'$', 3);
ioctl!(write perf_event_ioc_set_filter with b'$', 6; *mut ::std::os::raw::c_char);
ioctl!(none perf_event_ioc_set_output with b'$', 5);
ioctl!(read pmu_ioc_can_sleep with b'B', 5; ::libc::size_t);
ioctl!(read pmu_ioc_get_backlight with b'B', 1; ::libc::size_t);
ioctl!(read pmu_ioc_get_model with b'B', 3; ::libc::size_t);
ioctl!(read pmu_ioc_grab_backlight with b'B', 6; ::libc::size_t);
ioctl!(read pmu_ioc_has_adb with b'B', 4; ::libc::size_t);
ioctl!(write pmu_ioc_set_backlight with b'B', 2; ::libc::size_t);
ioctl!(none pmu_ioc_sleep with b'B', 0);
ioctl!(write pppiocattach with b't', 61; ::std::os::raw::c_int);
ioctl!(write pppiocattchan with b't', 56; ::std::os::raw::c_int);
ioctl!(write pppiocbundle with b't', 129; ::std::os::raw::c_int);
ioctl!(write pppiocconnect with b't', 58; ::std::os::raw::c_int);
ioctl!(write pppiocdetach with b't', 60; ::std::os::raw::c_int);
ioctl!(none pppiocdisconn with b't', 57);
ioctl!(read pppiocgasyncmap with b't', 88; ::std::os::raw::c_int);
// ioctl!(readwrite pppiocgcallinfo with b't', 128; /*struct*/ pppcallinfo);
ioctl!(read pppiocgchan with b't', 55; ::std::os::raw::c_int);
ioctl!(read pppiocgcompressors with b't', 134; [::libc::c_ulong; 8]);
ioctl!(read pppiocgdebug with b't', 65; ::std::os::raw::c_int);
ioctl!(read pppiocgflags with b't', 90; ::std::os::raw::c_int);
// ioctl!(read pppiocgidle with b't', 63; /*struct*/ ppp_idle);
ioctl!(read pppiocgifname with b't', 136; [::std::os::raw::c_char; IFNAMSIZ]);
// ioctl!(read pppiocgl2tpstats with b't', 54; /*struct*/ pppol2tp_ioc_stats);
ioctl!(read pppiocgmpflags with b't', 130; ::std::os::raw::c_int);
ioctl!(read pppiocgmru with b't', 83; ::std::os::raw::c_int);
// ioctl!(readwrite pppiocgnpmode with b't', 76; /*struct*/ npioctl);
ioctl!(read pppiocgrasyncmap with b't', 85; ::std::os::raw::c_int);
ioctl!(read pppiocgunit with b't', 86; ::std::os::raw::c_int);
// ioctl!(read pppiocgxasyncmap with b't', 80; FIXME1<['ext_accm']>);
ioctl!(readwrite pppiocnewunit with b't', 62; ::std::os::raw::c_int);
// ioctl!(write pppiocsactive with b't', 70; /*struct*/ sock_fprog);
ioctl!(write pppiocsasyncmap with b't', 87; ::std::os::raw::c_int);
// ioctl!(write pppiocscompress with b't', 77; /*struct*/ ppp_option_data);
ioctl!(write pppiocscompressor with b't', 135; ::std::os::raw::c_int);
ioctl!(write pppiocsdebug with b't', 64; ::std::os::raw::c_int);
ioctl!(write pppiocsflags with b't', 89; ::std::os::raw::c_int);
ioctl!(write pppiocsmaxcid with b't', 81; ::std::os::raw::c_int);
ioctl!(write pppiocsmpflags with b't', 131; ::std::os::raw::c_int);
ioctl!(write pppiocsmpmru with b't', 133; ::std::os::raw::c_int);
ioctl!(write pppiocsmpmtu with b't', 132; ::std::os::raw::c_int);
ioctl!(write pppiocsmrru with b't', 59; ::std::os::raw::c_int);
ioctl!(write pppiocsmru with b't', 82; ::std::os::raw::c_int);
// ioctl!(write pppiocsnpmode with b't', 75; /*struct*/ npioctl);
// ioctl!(write pppiocspass with b't', 71; /*struct*/ sock_fprog);
ioctl!(write pppiocsrasyncmap with b't', 84; ::std::os::raw::c_int);
// ioctl!(write pppiocsxasyncmap with b't', 79; FIXME1<['ext_accm']>);
ioctl!(none pppiocxferunit with b't', 78);
ioctl!(read reiserfs_ioc_getflags with b'f', 1; ::std::os::raw::c_long);
ioctl!(read reiserfs_ioc_getversion with b'v', 1; ::std::os::raw::c_long);
ioctl!(write resierfs_ioc_setflags with b'f', 2; ::std::os::raw::c_long);
ioctl!(write reiserfs_ioc_setversion with b'v', 2; ::std::os::raw::c_long);
ioctl!(write reiserfs_ioc_unpack with 0xCD, 1; ::std::os::raw::c_long);
ioctl!(none rfkill_ioctl_noinput with RFKILL_IOC_MAGIC, RFKILL_IOC_NOINPUT);
ioctl!(none scsi_ioctl_benchmark_command with 0, 3);
ioctl!(none scsi_ioctl_doorlock with 83, 128);
ioctl!(none scsi_ioctl_doorunlock with 83, 129);
ioctl!(none scsi_ioctl_get_bus_number with 83, 134);
ioctl!(none scsi_ioctl_get_idlun with 83, 130);
ioctl!(none scsi_ioctl_probe_host with 83, 133);
ioctl!(none scsi_ioctl_send_command with 0, 1);
ioctl!(none scsi_ioctl_start_unit with 0, 5);
ioctl!(none scsi_ioctl_stop_unit with 0, 6);
ioctl!(none scsi_ioctl_sync with 0, 4);
ioctl!(none scsi_ioctl_tagged_disable with 83, 132);
ioctl!(none scsi_ioctl_tagged_enable with 83, 131);
ioctl!(none scsi_ioctl_test_unit_ready with 0, 2);
ioctl!(none siocadddlci with 137, 128);
ioctl!(none siocaddmulti with 137, 49);
ioctl!(none siocaddrt with 137, 11);
ioctl!(bad siocaipxitfcrt with 35296);
ioctl!(none siocaipxprislt with 137, 225);
ioctl!(none siocatalkdifaddr with 137, 224);
ioctl!(none siocatmark with 137, 5);
ioctl!(none siocax25addfwd with 137, 234);
ioctl!(none siocax25adduid with 137, 225);
ioctl!(none siocax25bpqaddr with 137, 228);
ioctl!(none siocax25ctlcon with 137, 232);
ioctl!(none siocax25delfwd with 137, 235);
ioctl!(none siocax25deluid with 137, 226);
ioctl!(none siocax25devctl with 137, 236);
ioctl!(none siocax25getinfo with 137, 237);
ioctl!(none siocax25getinfoold with 137, 233);
ioctl!(none siocax25getparms with 137, 229);
ioctl!(bad siocax25getuid with 35296);
ioctl!(none siocax25nouid with 137, 227);
ioctl!(none siocax25optrt with 137, 231);
ioctl!(none siocax25setparms with 137, 230);
ioctl!(none siocbondchangeactive with 137, 149);
ioctl!(none siocbondenslave with 137, 144);
ioctl!(none siocbondinfoquery with 137, 148);
ioctl!(none siocbondrelease with 137, 145);
ioctl!(none siocbondsethwaddr with 137, 146);
ioctl!(none siocbondslaveinfoquery with 137, 147);
ioctl!(none siocbraddbr with 137, 160);
ioctl!(none siocbraddif with 137, 162);
ioctl!(none siocbrdelbr with 137, 161);
ioctl!(none siocbrdelif with 137, 163);
ioctl!(none siocdarp with 137, 83);
ioctl!(none siocdeldlci with 137, 129);
ioctl!(none siocdelmulti with 137, 50);
ioctl!(none siocdelrt with 137, 12);
ioctl!(bad siocdevplip with 35312);
ioctl!(none siocdevprivate with 137, 240);
ioctl!(none siocdifaddr with 137, 54);
ioctl!(none siocdrarp with 137, 96);
ioctl!(none siocethtool with 137, 70);
ioctl!(none siocgarp with 137, 84);
ioctl!(none siocgbpqethparam with 80, 0);
ioctl!(none siocgcmfirmware with 137, 241);
ioctl!(none siocgcmfrequency with 137, 242);
ioctl!(none siocgcmpids with 137, 244);
ioctl!(none siocgcmstats with 137, 240);
ioctl!(none siocgdebserint with 137, 242);
ioctl!(none siocgdongle with 137, 241);
ioctl!(bad siocgetlinkname with 35296);
ioctl!(none siocghwtstamp with 137, 177);
ioctl!(none siocgifaddr with 137, 21);
ioctl!(none siocgifbr with 137, 64);
ioctl!(none siocgifbrdaddr with 137, 25);
ioctl!(none siocgifconf with 137, 18);
ioctl!(none siocgifcount with 137, 56);
ioctl!(none siocgifdstaddr with 137, 23);
ioctl!(none siocgifencap with 137, 37);
ioctl!(none siocgifflags with 137, 19);
ioctl!(none siocgifhwaddr with 137, 39);
ioctl!(none siocgifindex with 137, 51);
ioctl!(none siocgifmap with 137, 112);
ioctl!(none siocgifmem with 137, 31);
ioctl!(none siocgifmetric with 137, 29);
ioctl!(none siocgifmtu with 137, 33);
ioctl!(none siocgifname with 137, 16);
ioctl!(none siocgifnetmask with 137, 27);
ioctl!(none siocgifpflags with 137, 53);
ioctl!(none siocgifslave with 137, 41);
ioctl!(none siocgiftxqlen with 137, 66);
ioctl!(none siocgifvlan with 137, 130);
ioctl!(none siocgkeepalive with 137, 241);
ioctl!(none siocgkeepperiod with 137, 240);
ioctl!(none siocglease with 137, 245);
ioctl!(none siocgmediabusy with 137, 244);
ioctl!(none siocgmiiphy with 137, 71);
ioctl!(none siocgmiireg with 137, 72);
ioctl!(none siocgmode with 137, 247);
// ioctl!(read siocgnetaddr with DECNET_IOCTL_BASE, 0xe1; /*struct*/ dn_naddr);
ioctl!(none siocgoutfill with 137, 243);
ioctl!(none siocgpgrp with 137, 4);
ioctl!(none siocgpppcstats with 137, 242);
ioctl!(none siocgpppstats with 137, 240);
ioctl!(none siocgpppver with 137, 241);
ioctl!(none siocgqos with 137, 249);
ioctl!(none siocgrarp with 137, 97);
ioctl!(none siocgreceiving with 137, 245);
ioctl!(none siocgstamp with 137, 6);
ioctl!(none siocgstampns with 137, 7);
ioctl!(bad siocinq with 21531);
ioctl!(none siocipxcfgdata with 137, 226);
ioctl!(none siocipxncpconn with 137, 227);
ioctl!(none siocmkclip with b'a', ATMIOC_CLIP);
ioctl!(none siocnrctlcon with 137, 228);
ioctl!(none siocnrdecobs with 137, 226);
ioctl!(none siocnrgetparms with 137, 224);
ioctl!(none siocnrrtctl with 137, 227);
ioctl!(none siocnrsetparms with 137, 225);
ioctl!(bad siocoutq with 21521);
ioctl!(none siocoutqnsd with 137, 75);
ioctl!(none siocparm_mask with 31, 255);
ioctl!(none siocprotoprivate with 137, 224);
ioctl!(none siocrsaccept with 137, 227);
ioctl!(none siocrsclrrt with 137, 228);
ioctl!(none siocrsgcause with 137, 224);
ioctl!(none siocrsgfacilities with 137, 230);
ioctl!(none siocrsgl2call with 137, 229);
ioctl!(none siocrsl2call with 137, 226);
ioctl!(none siocrsscause with 137, 225);
ioctl!(none siocrssl2call with 137, 226);
ioctl!(none siocrtmsg with 137, 13);
ioctl!(none siocsarp with 137, 85);
ioctl!(none siocsbandwidth with 137, 242);
ioctl!(none siocsbpqethaddr with 137, 241);
ioctl!(none siocsbpqethopt with 137, 240);
ioctl!(none siocsbpqethparam with 80, 1);
ioctl!(none siocscmfrequency with 137, 243);
ioctl!(none siocscmpids with 137, 245);
ioctl!(none siocsdebserint with 137, 243);
ioctl!(none siocsdongle with 137, 240);
ioctl!(none siocsdtrrts with 137, 248);
ioctl!(none siocshwtstamp with 137, 176);
ioctl!(none siocsifaddr with 137, 22);
ioctl!(none siocsifatmtcp with b'a', ATMIOC_ITF);
ioctl!(none siocsifbr with 137, 65);
ioctl!(none siocsifbrdaddr with 137, 26);
ioctl!(none siocsifdstaddr with 137, 24);
ioctl!(none siocsifencap with 137, 38);
ioctl!(none siocsifflags with 137, 20);
ioctl!(none siocsifhwaddr with 137, 36);
ioctl!(none siocsifhwbroadcast with 137, 55);
ioctl!(none siocsiflink with 137, 17);
ioctl!(none siocsifmap with 137, 113);
ioctl!(none siocsifmem with 137, 32);
ioctl!(none siocsifmetric with 137, 30);
ioctl!(none siocsifmtu with 137, 34);
ioctl!(none siocsifname with 137, 35);
ioctl!(none siocsifnetmask with 137, 28);
ioctl!(none siocsifpflags with 137, 52);
ioctl!(none siocsifslave with 137, 48);
ioctl!(none siocsiftxqlen with 137, 67);
ioctl!(none siocsifvlan with 137, 131);
ioctl!(bad siocskeepalive with 35312);
ioctl!(none siocskeepperiod with 137, 241);
ioctl!(none siocslease with 137, 244);
ioctl!(none siocsmediabusy with 137, 243);
ioctl!(none siocsmiireg with 137, 73);
ioctl!(none siocsmode with 137, 246);
// ioctl!(write siocsnetaddr with DECNET_IOCTL_BASE, 0xe0; /*struct*/ dn_naddr);
ioctl!(none siocsoutfill with 137, 242);
ioctl!(none siocspgrp with 137, 2);
ioctl!(none siocsrarp with 137, 98);
ioctl!(none siocwandev with 137, 74);
ioctl!(none siocx25callaccptapprv with 137, 232);
ioctl!(none siocx25gcalluserdata with 137, 228);
ioctl!(none siocx25gcausediag with 137, 230);
ioctl!(none siocx25gdtefacilities with 137, 234);
ioctl!(none siocx25gfacilities with 137, 226);
ioctl!(none siocx25gsubscrip with 137, 224);
ioctl!(none siocx25scalluserdata with 137, 229);
ioctl!(none siocx25scausediag with 137, 236);
ioctl!(none siocx25scudmatchlen with 137, 231);
ioctl!(none siocx25sdtefacilities with 137, 235);
ioctl!(none siocx25sendcallaccpt with 137, 233);
ioctl!(none siocx25sfacilities with 137, 227);
ioctl!(none siocx25ssubscrip with 137, 225);
ioctl!(none sndrv_dm_fm_ioctl_clear_patches with b'H', 0x40);
// ioctl!(read sndrv_dm_fm_ioctl_info with b'H', 0x20; /*struct*/ snd_dm_fm_info);
// ioctl!(write sndrv_dm_fm_ioctl_play_note with b'H', 0x22; /*struct*/ snd_dm_fm_note);
ioctl!(none sndrv_dm_fm_ioctl_reset with b'H', 0x21);
ioctl!(write sndrv_dm_fm_ioctl_set_connection with b'H', 0x26; ::std::os::raw::c_int);
ioctl!(write sndrv_dm_fm_ioctl_set_mode with b'H', 0x25; ::std::os::raw::c_int);
// ioctl!(write sndrv_dm_fm_ioctl_set_params with b'H', 0x24; /*struct*/ snd_dm_fm_params);
// ioctl!(write sndrv_dm_fm_ioctl_set_voice with b'H', 0x23; /*struct*/ snd_dm_fm_voice);
ioctl!(none sndrv_dm_fm_oss_ioctl_play_note with 0, 33);
ioctl!(none sndrv_dm_fm_oss_ioctl_reset with 0, 32);
ioctl!(none sndrv_dm_fm_oss_ioctl_set_mode with 0, 36);
ioctl!(none sndrv_dm_fm_oss_ioctl_set_opl with 0, 37);
ioctl!(none sndrv_dm_fm_oss_ioctl_set_params with 0, 35);
ioctl!(none sndrv_dm_fm_oss_ioctl_set_voice with 0, 34);
// ioctl!(readwrite sndrv_emu10k1_ioctl_code_peek with b'H', 0x12; FIXME1<['emu10k1_fx8010_code_t']>);
// ioctl!(write sndrv_emu10k1_ioctl_code_poke with b'H', 0x11; FIXME1<['emu10k1_fx8010_code_t']>);
ioctl!(none sndrv_emu10k1_ioctl_continue with b'H', 0x81);
ioctl!(read sndrv_emu10k1_ioctl_dbg_read with b'H', 0x84; ::std::os::raw::c_int);
// ioctl!(read sndrv_emu10k1_ioctl_info with b'H', 0x10; FIXME1<['emu10k1_fx8010_info_t']>);
// ioctl!(readwrite sndrv_emu10k1_ioctl_pcm_peek with b'H', 0x31; FIXME1<['emu10k1_fx8010_pcm_t']>);
// ioctl!(write sndrv_emu10k1_ioctl_pcm_poke with b'H', 0x30; FIXME1<['emu10k1_fx8010_pcm_t']>);
ioctl!(read sndrv_emu10k1_ioctl_pversion with b'H', 0x40; ::std::os::raw::c_int);
ioctl!(write sndrv_emu10k1_ioctl_single_step with b'H', 0x83; ::std::os::raw::c_int);
ioctl!(none sndrv_emu10k1_ioctl_stop with b'H', 0x80);
// ioctl!(readwrite sndrv_emu10k1_ioctl_tram_peek with b'H', 0x22; FIXME1<['emu10k1_fx8010_tram_t']>);
// ioctl!(write sndrv_emu10k1_ioctl_tram_poke with b'H', 0x21; FIXME1<['emu10k1_fx8010_tram_t']>);
ioctl!(write sndrv_emu10k1_ioctl_tram_setup with b'H', 0x20; ::std::os::raw::c_int);
ioctl!(none sndrv_emu10k1_ioctl_zero_tram_counter with b'H', 0x82);
// ioctl!(read sndrv_firewire_ioctl_get_info with b'H', 0xf8; /*struct*/ snd_firewire_get_info);
ioctl!(none sndrv_firewire_ioctl_lock with b'H', 0xf9);
ioctl!(none sndrv_firewire_ioctl_unlock with b'H', 0xfa);
// ioctl!(read sndrv_hdsp_ioctl_get_9632_aeb with b'H', 0x45; FIXME1<['hdsp_9632_aeb_t']>);
// ioctl!(read sndrv_hdsp_ioctl_get_9632_aeb with b'H', 0x45; /*struct*/ hdsp_9632_aeb);
// ioctl!(read sndrv_hdsp_ioctl_get_config_info with b'H', 0x41; FIXME1<['hdsp_config_info_t']>);
// ioctl!(read sndrv_hdsp_ioctl_get_config_info with b'H', 0x41; /*struct*/ hdsp_config_info);
// ioctl!(read sndrv_hdsp_ioctl_get_mixer with b'H', 0x44; FIXME1<['hdsp_mixer_t']>);
// ioctl!(read sndrv_hdsp_ioctl_get_mixer with b'H', 0x44; /*struct*/ hdsp_mixer);
// ioctl!(read sndrv_hdsp_ioctl_get_peak_rms with b'H', 0x40; FIXME1<['hdsp_peak_rms_t']>);
// ioctl!(read sndrv_hdsp_ioctl_get_peak_rms with b'H', 0x40; /*struct*/ hdsp_peak_rms);
// ioctl!(read sndrv_hdsp_ioctl_get_version with b'H', 0x43; FIXME1<['hdsp_version_t']>);
// ioctl!(read sndrv_hdsp_ioctl_get_version with b'H', 0x43; /*struct*/ hdsp_version);
// ioctl!(write sndrv_hdsp_ioctl_upload_firmware with b'H', 0x42; FIXME1<['hdsp_firmware_t']>);
// ioctl!(write sndrv_hdsp_ioctl_upload_firmware with b'H', 0x42; /*struct*/ hdsp_firmware);
// ioctl!(read sndrv_sb_csp_ioctl_info with b'H', 0x10; FIXME1<['snd_sb_csp_info_t']>);
// ioctl!(read sndrv_sb_csp_ioctl_info with b'H', 0x10; /*struct*/ snd_sb_csp_info);
// TODO #define SNDRV_SB_CSP_IOCTL_LOAD_CODE _IOC ( _IOC_WRITE , 'H' , 0x11 , sizeof ( struct snd_sb_csp_microcode ) )
// ioctl!(write sndrv_sb_csp_ioctl_load_code with b'H', 0x11; FIXME1<['snd_sb_csp_microcode_t']>);
ioctl!(none sndrv_sb_csp_ioctl_pause with b'H', 0x15);
ioctl!(none sndrv_sb_csp_ioctl_restart with b'H', 0x16);
// ioctl!(write sndrv_sb_csp_ioctl_start with b'H', 0x13; FIXME1<['snd_sb_csp_start_t']>);
// ioctl!(write sndrv_sb_csp_ioctl_start with b'H', 0x13; /*struct*/ snd_sb_csp_start);
ioctl!(none sndrv_sb_csp_ioctl_stop with b'H', 0x14);
ioctl!(none sndrv_sb_csp_ioctl_unload_code with b'H', 0x12);
ioctl!(read sonypi_iocgbat1cap with b'v', 2; u16);
ioctl!(read sonypi_iocgbat1rem with b'v', 3; u16);
ioctl!(read sonypi_iocgbat2cap with b'v', 4; u16);
ioctl!(read sonypi_iocgbat2rem with b'v', 5; u16);
ioctl!(read sonypi_iocgbatflags with b'v', 7; u8);
ioctl!(read sonypi_iocgblue with b'v', 8; u8);
ioctl!(read sonypi_iocgbrt with b'v', 0; u8);
ioctl!(read sonypi_iocgfan with b'v', 10; u8);
ioctl!(read sonypi_iocgtemp with b'v', 12; u8);
ioctl!(write sonypi_iocsblue with b'v', 9; u8);
ioctl!(write sonypi_iocsbrt with b'v', 0; u8);
ioctl!(write sonypi_iocsfan with b'v', 11; u8);
ioctl!(write spiocstype with b'q', 0x01; ::libc::c_ulong);
// TODO #define SPI_IOC_MESSAGE ( N ) _IOW ( SPI_IOC_MAGIC , 0 , char [ SPI_MSGSIZE ( N ) ] )
ioctl!(read spi_ioc_rd_bits_per_word with SPI_IOC_MAGIC, 3; u8);
ioctl!(read spi_ioc_rd_lsb_first with SPI_IOC_MAGIC, 2; u8);
ioctl!(read spi_ioc_rd_max_speed_hz with SPI_IOC_MAGIC, 4; u32);
ioctl!(read spi_ioc_rd_mode with SPI_IOC_MAGIC, 1; u8);
ioctl!(read spi_ioc_rd_mode32 with SPI_IOC_MAGIC, 5; u32);
ioctl!(write spi_ioc_wr_bits_per_word with SPI_IOC_MAGIC, 3; u8);
ioctl!(write spi_ioc_wr_lsb_first with SPI_IOC_MAGIC, 2; u8);
ioctl!(write spi_ioc_wr_max_speed_hz with SPI_IOC_MAGIC, 4; u32);
ioctl!(write spi_ioc_wr_mode with SPI_IOC_MAGIC, 1; u8);
ioctl!(write spi_ioc_wr_mode32 with SPI_IOC_MAGIC, 5; u32);
ioctl!(none sys_f_ioctlsocket with 0, 5);
ioctl!(none tioccbrk with 84, 40);
ioctl!(none tioccons with 84, 29);
ioctl!(none tiocexcl with 84, 12);
ioctl!(read tiocgdev with b'T', 0x32; ::libc::c_uint);
ioctl!(none tiocgetd with 84, 36);
ioctl!(read tiocgexcl with b'T', 0x40; ::std::os::raw::c_int);
ioctl!(none tiocgicount with 84, 93);
ioctl!(none tiocglcktrmios with 84, 86);
ioctl!(none tiocgpgrp with 84, 15);
ioctl!(read tiocgpkt with b'T', 0x38; ::std::os::raw::c_int);
ioctl!(read tiocgptlck with b'T', 0x39; ::std::os::raw::c_int);
ioctl!(read tiocgptn with b'T', 0x30; ::libc::c_uint);
ioctl!(none tiocgrs485 with 84, 46);
ioctl!(none tiocgserial with 84, 30);
ioctl!(none tiocgsid with 84, 41);
ioctl!(none tiocgsoftcar with 84, 25);
ioctl!(none tiocgwinsz with 84, 19);
ioctl!(bad tiocinq with 21531);
ioctl!(none tioclinux with 84, 28);
ioctl!(none tiocl_blankedscreen with 0, 15);
ioctl!(none tiocl_blankscreen with 0, 14);
ioctl!(none tiocl_getfgconsole with 0, 12);
ioctl!(none tiocl_getkmsgredirect with 0, 17);
ioctl!(none tiocl_getmousereporting with 0, 7);
ioctl!(none tiocl_getshiftstate with 0, 6);
ioctl!(none tiocl_pastesel with 0, 3);
ioctl!(none tiocl_scrollconsole with 0, 13);
ioctl!(none tiocl_selbuttonmask with 0, 15);
ioctl!(none tiocl_selchar with 0, 0);
ioctl!(none tiocl_selclear with 0, 4);
ioctl!(none tiocl_selline with 0, 2);
ioctl!(none tiocl_selloadlut with 0, 5);
ioctl!(none tiocl_selmousereport with 0, 16);
ioctl!(none tiocl_selpointer with 0, 3);
ioctl!(none tiocl_selword with 0, 1);
ioctl!(none tiocl_setkmsgredirect with 0, 11);
ioctl!(none tiocl_setsel with 0, 2);
ioctl!(none tiocl_setvesablank with 0, 10);
ioctl!(none tiocl_unblankscreen with 0, 4);
ioctl!(none tiocmbic with 84, 23);
ioctl!(none tiocmbis with 84, 22);
ioctl!(none tiocmget with 84, 21);
ioctl!(none tiocmiwait with 84, 92);
ioctl!(none tiocmset with 84, 24);
ioctl!(none tiocm_car with 0, 64);
ioctl!(bad tiocm_cd with 64);
ioctl!(none tiocm_cts with 0, 32);
ioctl!(none tiocm_dsr with 1, 0);
ioctl!(none tiocm_dtr with 0, 2);
ioctl!(none tiocm_le with 0, 1);
ioctl!(none tiocm_loop with 128, 0);
ioctl!(none tiocm_out1 with 32, 0);
ioctl!(none tiocm_out2 with 64, 0);
ioctl!(bad tiocm_ri with 128);
ioctl!(none tiocm_rng with 0, 128);
ioctl!(none tiocm_rts with 0, 4);
ioctl!(none tiocm_sr with 0, 16);
ioctl!(none tiocm_st with 0, 8);
ioctl!(none tiocnotty with 84, 34);
ioctl!(none tiocnxcl with 84, 13);
ioctl!(none tiocoutq with 84, 17);
ioctl!(none tiocpkt with 84, 32);
ioctl!(none tiocpkt_data with 0, 0);
ioctl!(none tiocpkt_dostop with 0, 32);
ioctl!(none tiocpkt_flushread with 0, 1);
ioctl!(none tiocpkt_flushwrite with 0, 2);
ioctl!(none tiocpkt_ioctl with 0, 64);
ioctl!(none tiocpkt_nostop with 0, 16);
ioctl!(none tiocpkt_start with 0, 8);
ioctl!(none tiocpkt_stop with 0, 4);
ioctl!(none tiocsbrk with 84, 39);
ioctl!(none tiocsctty with 84, 14);
ioctl!(none tiocserconfig with 84, 83);
ioctl!(none tiocsergetlsr with 84, 89);
ioctl!(none tiocsergetmulti with 84, 90);
ioctl!(none tiocsergstruct with 84, 88);
ioctl!(none tiocsergwild with 84, 84);
ioctl!(none tiocsersetmulti with 84, 91);
ioctl!(none tiocserswild with 84, 85);
ioctl!(none tiocser_temt with 0, 1);
ioctl!(none tiocsetd with 84, 35);
ioctl!(write tiocsig with b'T', 0x36; ::std::os::raw::c_int);
ioctl!(none tiocslcktrmios with 84, 87);
ioctl!(none tiocspgrp with 84, 16);
ioctl!(write tiocsptlck with b'T', 0x31; ::std::os::raw::c_int);
ioctl!(none tiocsrs485 with 84, 47);
ioctl!(none tiocsserial with 84, 31);
ioctl!(none tiocssoftcar with 84, 26);
ioctl!(none tiocsti with 84, 18);
ioctl!(none tiocswinsz with 84, 20);
ioctl!(none tiocvhangup with 84, 55);
// ioctl!(write ubi_iocatt with UBI_CTRL_IOC_MAGIC, 64; /*struct*/ ubi_attach_req);
ioctl!(write ubi_iocdet with UBI_CTRL_IOC_MAGIC, 65; i32);
ioctl!(write ubi_iocebch with UBI_VOL_IOC_MAGIC, 2; i32);
ioctl!(write ubi_ioceber with UBI_VOL_IOC_MAGIC, 1; i32);
ioctl!(read ubi_iocebismap with UBI_VOL_IOC_MAGIC, 5; i32);
// ioctl!(write ubi_iocebmap with UBI_VOL_IOC_MAGIC, 3; /*struct*/ ubi_map_req);
ioctl!(write ubi_iocebunmap with UBI_VOL_IOC_MAGIC, 4; i32);
// ioctl!(write ubi_iocmkvol with UBI_IOC_MAGIC, 0; /*struct*/ ubi_mkvol_req);
ioctl!(write ubi_iocrmvol with UBI_IOC_MAGIC, 1; i32);
// ioctl!(write ubi_iocrnvol with UBI_IOC_MAGIC, 3; /*struct*/ ubi_rnvol_req);
// ioctl!(write ubi_iocrsvol with UBI_IOC_MAGIC, 2; /*struct*/ ubi_rsvol_req);
// ioctl!(write ubi_iocsetvolprop with UBI_VOL_IOC_MAGIC, 6; /*struct*/ ubi_set_vol_prop_req);
// ioctl!(write ubi_iocvolcrblk with UBI_VOL_IOC_MAGIC, 7; /*struct*/ ubi_blkcreate_req);
ioctl!(none ubi_iocvolrmblk with UBI_VOL_IOC_MAGIC, 8);
ioctl!(write ubi_iocvolup with UBI_VOL_IOC_MAGIC, 0; i64);
// ioctl!(readwrite usbdevfs_ioctl with b'U', 18; /*struct*/ usbdevfs_ioctl);
// ioctl!(readwrite usbdevfs_ioctl32 with b'U', 18; /*struct*/ usbdevfs_ioctl32);
ioctl!(none usbtmc_ioctl_abort_bulk_in with USBTMC_IOC_NR, 4);
ioctl!(none usbtmc_ioctl_abort_bulk_out with USBTMC_IOC_NR, 3);
ioctl!(none usbtmc_ioctl_clear with USBTMC_IOC_NR, 2);
ioctl!(none usbtmc_ioctl_clear_in_halt with USBTMC_IOC_NR, 7);
ioctl!(none usbtmc_ioctl_clear_out_halt with USBTMC_IOC_NR, 6);
ioctl!(none usbtmc_ioctl_indicator_pulse with USBTMC_IOC_NR, 1);
// ioctl!(readwrite uvcioc_ctrl_map with b'u', 0x20; /*struct*/ uvc_xu_control_mapping);
// ioctl!(readwrite uvcioc_ctrl_query with b'u', 0x21; /*struct*/ uvc_xu_control_query);
// ioctl!(read vfat_ioctl_readdir_both with b'r', 1; [/*struct*/ __fat_dirent; 2]);
// ioctl!(read vfat_ioctl_readdir_short with b'r', 2; [/*struct*/ __fat_dirent; 2]);
// ioctl!(readwrite vidioc_create_bufs with b'V', 92; /*struct*/ v4l2_create_buffers);
// ioctl!(readwrite vidioc_cropcap with b'V', 58; /*struct*/ v4l2_cropcap);
// ioctl!(readwrite vidioc_dbg_g_chip_info with b'V', 102; /*struct*/ v4l2_dbg_chip_info);
// ioctl!(readwrite vidioc_dbg_g_register with b'V', 80; /*struct*/ v4l2_dbg_register);
// ioctl!(write vidioc_dbg_s_register with b'V', 79; /*struct*/ v4l2_dbg_register);
// ioctl!(readwrite vidioc_decoder_cmd with b'V', 96; /*struct*/ v4l2_decoder_cmd);
// ioctl!(readwrite vidioc_dqbuf with b'V', 17; /*struct*/ v4l2_buffer);
// ioctl!(read vidioc_dqevent with b'V', 89; /*struct*/ v4l2_event);
// ioctl!(readwrite vidioc_dv_timings_cap with b'V', 100; /*struct*/ v4l2_dv_timings_cap);
// ioctl!(readwrite vidioc_encoder_cmd with b'V', 77; /*struct*/ v4l2_encoder_cmd);
// ioctl!(readwrite vidioc_enumaudio with b'V', 65; /*struct*/ v4l2_audio);
// ioctl!(readwrite vidioc_enumaudout with b'V', 66; /*struct*/ v4l2_audioout);
// ioctl!(readwrite vidioc_enuminput with b'V', 26; /*struct*/ v4l2_input);
// ioctl!(readwrite vidioc_enumoutput with b'V', 48; /*struct*/ v4l2_output);
// ioctl!(readwrite vidioc_enumstd with b'V', 25; /*struct*/ v4l2_standard);
// ioctl!(readwrite vidioc_enum_dv_timings with b'V', 98; /*struct*/ v4l2_enum_dv_timings);
// ioctl!(readwrite vidioc_enum_fmt with b'V', 2; /*struct*/ v4l2_fmtdesc);
// ioctl!(readwrite vidioc_enum_frameintervals with b'V', 75; /*struct*/ v4l2_frmivalenum);
// ioctl!(readwrite vidioc_enum_framesizes with b'V', 74; /*struct*/ v4l2_frmsizeenum);
// ioctl!(readwrite vidioc_enum_freq_bands with b'V', 101; /*struct*/ v4l2_frequency_band);
// ioctl!(readwrite vidioc_expbuf with b'V', 16; /*struct*/ v4l2_exportbuffer);
// ioctl!(read vidioc_g_audio with b'V', 33; /*struct*/ v4l2_audio);
// ioctl!(read vidioc_g_audout with b'V', 49; /*struct*/ v4l2_audioout);
// ioctl!(readwrite vidioc_g_crop with b'V', 59; /*struct*/ v4l2_crop);
// ioctl!(readwrite vidioc_g_ctrl with b'V', 27; /*struct*/ v4l2_control);
// ioctl!(readwrite vidioc_g_dv_timings with b'V', 88; /*struct*/ v4l2_dv_timings);
// ioctl!(readwrite vidioc_g_edid with b'V', 40; /*struct*/ v4l2_edid);
// ioctl!(read vidioc_g_enc_index with b'V', 76; /*struct*/ v4l2_enc_idx);
// ioctl!(readwrite vidioc_g_ext_ctrls with b'V', 71; /*struct*/ v4l2_ext_controls);
// ioctl!(read vidioc_g_fbuf with b'V', 10; /*struct*/ v4l2_framebuffer);
// ioctl!(readwrite vidioc_g_fmt with b'V', 4; /*struct*/ v4l2_format);
// ioctl!(readwrite vidioc_g_frequency with b'V', 56; /*struct*/ v4l2_frequency);
ioctl!(read vidioc_g_input with b'V', 38; ::std::os::raw::c_int);
// ioctl!(read vidioc_g_jpegcomp with b'V', 61; /*struct*/ v4l2_jpegcompression);
// ioctl!(readwrite vidioc_g_modulator with b'V', 54; /*struct*/ v4l2_modulator);
ioctl!(read vidioc_g_output with b'V', 46; ::std::os::raw::c_int);
// ioctl!(readwrite vidioc_g_parm with b'V', 21; /*struct*/ v4l2_streamparm);
ioctl!(read vidioc_g_priority with b'V', 67; u32);
// ioctl!(readwrite vidioc_g_selection with b'V', 94; /*struct*/ v4l2_selection);
// ioctl!(readwrite vidioc_g_sliced_vbi_cap with b'V', 69; /*struct*/ v4l2_sliced_vbi_cap);
// ioctl!(read vidioc_g_std with b'V', 23; FIXME1<['v4l2_std_id']>);
// ioctl!(readwrite vidioc_g_tuner with b'V', 29; /*struct*/ v4l2_tuner);
ioctl!(none vidioc_log_status with b'V', 70);
// ioctl!(readwrite vidioc_omap3isp_aewb_cfg with b'V', BASE_VIDIOC_PRIVATE + 3; /*struct*/ omap3isp_h3a_aewb_config);
// ioctl!(readwrite vidioc_omap3isp_af_cfg with b'V', BASE_VIDIOC_PRIVATE + 5; /*struct*/ omap3isp_h3a_af_config);
// ioctl!(readwrite vidioc_omap3isp_ccdc_cfg with b'V', BASE_VIDIOC_PRIVATE + 1; /*struct*/ omap3isp_ccdc_update_config);
// ioctl!(readwrite vidioc_omap3isp_hist_cfg with b'V', BASE_VIDIOC_PRIVATE + 4; /*struct*/ omap3isp_hist_config);
// ioctl!(readwrite vidioc_omap3isp_prv_cfg with b'V', BASE_VIDIOC_PRIVATE + 2; /*struct*/ omap3isp_prev_update_config);
ioctl!(readwrite vidioc_omap3isp_stat_en with b'V', BASE_VIDIOC_PRIVATE + 7; ::libc::c_ulong);
// ioctl!(readwrite vidioc_omap3isp_stat_req with b'V', BASE_VIDIOC_PRIVATE + 6; /*struct*/ omap3isp_stat_data);
ioctl!(write vidioc_overlay with b'V', 14; ::std::os::raw::c_int);
// ioctl!(readwrite vidioc_prepare_buf with b'V', 93; /*struct*/ v4l2_buffer);
// ioctl!(readwrite vidioc_qbuf with b'V', 15; /*struct*/ v4l2_buffer);
// ioctl!(readwrite vidioc_querybuf with b'V', 9; /*struct*/ v4l2_buffer);
// ioctl!(read vidioc_querycap with b'V', 0; /*struct*/ v4l2_capability);
// ioctl!(readwrite vidioc_queryctrl with b'V', 36; /*struct*/ v4l2_queryctrl);
// ioctl!(readwrite vidioc_querymenu with b'V', 37; /*struct*/ v4l2_querymenu);
// ioctl!(read vidioc_querystd with b'V', 63; FIXME1<['v4l2_std_id']>);
// ioctl!(read vidioc_query_dv_timings with b'V', 99; /*struct*/ v4l2_dv_timings);
// ioctl!(readwrite vidioc_query_ext_ctrl with b'V', 103; /*struct*/ v4l2_query_ext_ctrl);
// ioctl!(readwrite vidioc_reqbufs with b'V', 8; /*struct*/ v4l2_requestbuffers);
ioctl!(none vidioc_reserved with b'V', 1);
ioctl!(write vidioc_streamoff with b'V', 19; ::std::os::raw::c_int);
ioctl!(write vidioc_streamon with b'V', 18; ::std::os::raw::c_int);
// ioctl!(readwrite vidioc_subdev_dv_timings_cap with b'V', 100; /*struct*/ v4l2_dv_timings_cap);
// ioctl!(readwrite vidioc_subdev_enum_dv_timings with b'V', 98; /*struct*/ v4l2_enum_dv_timings);
// ioctl!(readwrite vidioc_subdev_enum_frame_interval with b'V', 75; /*struct*/ v4l2_subdev_frame_interval_enum);
// ioctl!(readwrite vidioc_subdev_enum_frame_size with b'V', 74; /*struct*/ v4l2_subdev_frame_size_enum);
// ioctl!(readwrite vidioc_subdev_enum_mbus_code with b'V', 2; /*struct*/ v4l2_subdev_mbus_code_enum);
// ioctl!(readwrite vidioc_subdev_g_crop with b'V', 59; /*struct*/ v4l2_subdev_crop);
// ioctl!(readwrite vidioc_subdev_g_dv_timings with b'V', 88; /*struct*/ v4l2_dv_timings);
// ioctl!(readwrite vidioc_subdev_g_edid with b'V', 40; /*struct*/ v4l2_edid);
// ioctl!(readwrite vidioc_subdev_g_fmt with b'V', 4; /*struct*/ v4l2_subdev_format);
// ioctl!(readwrite vidioc_subdev_g_frame_interval with b'V', 21; /*struct*/ v4l2_subdev_frame_interval);
// ioctl!(readwrite vidioc_subdev_g_selection with b'V', 61; /*struct*/ v4l2_subdev_selection);
// ioctl!(read vidioc_subdev_query_dv_timings with b'V', 99; /*struct*/ v4l2_dv_timings);
// ioctl!(readwrite vidioc_subdev_s_crop with b'V', 60; /*struct*/ v4l2_subdev_crop);
// ioctl!(readwrite vidioc_subdev_s_dv_timings with b'V', 87; /*struct*/ v4l2_dv_timings);
// ioctl!(readwrite vidioc_subdev_s_edid with b'V', 41; /*struct*/ v4l2_edid);
// ioctl!(readwrite vidioc_subdev_s_fmt with b'V', 5; /*struct*/ v4l2_subdev_format);
// ioctl!(readwrite vidioc_subdev_s_frame_interval with b'V', 22; /*struct*/ v4l2_subdev_frame_interval);
// ioctl!(readwrite vidioc_subdev_s_selection with b'V', 62; /*struct*/ v4l2_subdev_selection);
// ioctl!(write vidioc_subscribe_event with b'V', 90; /*struct*/ v4l2_event_subscription);
// ioctl!(write vidioc_s_audio with b'V', 34; /*struct*/ v4l2_audio);
// ioctl!(write vidioc_s_audout with b'V', 50; /*struct*/ v4l2_audioout);
// ioctl!(write vidioc_s_crop with b'V', 60; /*struct*/ v4l2_crop);
// ioctl!(readwrite vidioc_s_ctrl with b'V', 28; /*struct*/ v4l2_control);
// ioctl!(readwrite vidioc_s_dv_timings with b'V', 87; /*struct*/ v4l2_dv_timings);
// ioctl!(readwrite vidioc_s_edid with b'V', 41; /*struct*/ v4l2_edid);
// ioctl!(readwrite vidioc_s_ext_ctrls with b'V', 72; /*struct*/ v4l2_ext_controls);
// ioctl!(write vidioc_s_fbuf with b'V', 11; /*struct*/ v4l2_framebuffer);
// ioctl!(readwrite vidioc_s_fmt with b'V', 5; /*struct*/ v4l2_format);
// ioctl!(write vidioc_s_frequency with b'V', 57; /*struct*/ v4l2_frequency);
// ioctl!(write vidioc_s_hw_freq_seek with b'V', 82; /*struct*/ v4l2_hw_freq_seek);
ioctl!(readwrite vidioc_s_input with b'V', 39; ::std::os::raw::c_int);
// ioctl!(write vidioc_s_jpegcomp with b'V', 62; /*struct*/ v4l2_jpegcompression);
// ioctl!(write vidioc_s_modulator with b'V', 55; /*struct*/ v4l2_modulator);
ioctl!(readwrite vidioc_s_output with b'V', 47; ::std::os::raw::c_int);
// ioctl!(readwrite vidioc_s_parm with b'V', 22; /*struct*/ v4l2_streamparm);
ioctl!(write vidioc_s_priority with b'V', 68; u32);
// ioctl!(readwrite vidioc_s_selection with b'V', 95; /*struct*/ v4l2_selection);
// ioctl!(write vidioc_s_std with b'V', 24; FIXME1<['v4l2_std_id']>);
// ioctl!(write vidioc_s_tuner with b'V', 30; /*struct*/ v4l2_tuner);
// ioctl!(readwrite vidioc_try_decoder_cmd with b'V', 97; /*struct*/ v4l2_decoder_cmd);
// ioctl!(readwrite vidioc_try_encoder_cmd with b'V', 78; /*struct*/ v4l2_encoder_cmd);
// ioctl!(readwrite vidioc_try_ext_ctrls with b'V', 73; /*struct*/ v4l2_ext_controls);
// ioctl!(readwrite vidioc_try_fmt with b'V', 64; /*struct*/ v4l2_format);
// ioctl!(write vidioc_unsubscribe_event with b'V', 91; /*struct*/ v4l2_event_subscription);
ioctl!(read wdioc_getbootstatus with WATCHDOG_IOCTL_BASE, 2; ::std::os::raw::c_int);
ioctl!(read wdioc_getpretimeout with WATCHDOG_IOCTL_BASE, 9; ::std::os::raw::c_int);
ioctl!(read wdioc_getstatus with WATCHDOG_IOCTL_BASE, 1; ::std::os::raw::c_int);
// ioctl!(read wdioc_getsupport with WATCHDOG_IOCTL_BASE, 0; /*struct*/ watchdog_info);
ioctl!(read wdioc_gettemp with WATCHDOG_IOCTL_BASE, 3; ::std::os::raw::c_int);
ioctl!(read wdioc_gettimeleft with WATCHDOG_IOCTL_BASE, 10; ::std::os::raw::c_int);
ioctl!(read wdioc_gettimeout with WATCHDOG_IOCTL_BASE, 7; ::std::os::raw::c_int);
ioctl!(read wdioc_keepalive with WATCHDOG_IOCTL_BASE, 5; ::std::os::raw::c_int);
ioctl!(read wdioc_setoptions with WATCHDOG_IOCTL_BASE, 4; ::std::os::raw::c_int);
ioctl!(readwrite wdioc_setpretimeout with WATCHDOG_IOCTL_BASE, 8; ::std::os::raw::c_int);
ioctl!(readwrite wdioc_settimeout with WATCHDOG_IOCTL_BASE, 6; ::std::os::raw::c_int);
ioctl!(readwrite x86_ioc_rdmsr_regs with b'c', 0xA0; [u32; 8]);
ioctl!(readwrite x86_ioc_wrmsr_regs with b'c', 0xA1; [u32; 8]);
// ioctl!(write xfs_ioc_allocsp with b'X', 10; /*struct*/ xfs_flock64);
// ioctl!(write xfs_ioc_allocsp64 with b'X', 36; /*struct*/ xfs_flock64);
// ioctl!(write xfs_ioc_attrlist_by_handle with b'X', 122; /*struct*/ xfs_fsop_attrlist_handlereq);
// ioctl!(write xfs_ioc_attrmulti_by_handle with b'X', 123; /*struct*/ xfs_fsop_attrmulti_handlereq);
// ioctl!(read xfs_ioc_dioinfo with b'X', 30; /*struct*/ dioattr);
// ioctl!(write xfs_ioc_error_clearall with b'X', 117; /*struct*/ xfs_error_injection);
// ioctl!(write xfs_ioc_error_injection with b'X', 116; /*struct*/ xfs_error_injection);
// ioctl!(readwrite xfs_ioc_fd_to_handle with b'X', 106; /*struct*/ xfs_fsop_handlereq);
// ioctl!(write xfs_ioc_freesp with b'X', 11; /*struct*/ xfs_flock64);
// ioctl!(write xfs_ioc_freesp64 with b'X', 37; /*struct*/ xfs_flock64);
ioctl!(readwrite xfs_ioc_freeze with b'X', 119; ::std::os::raw::c_int);
// ioctl!(read xfs_ioc_free_eofblocks with b'X', 58; /*struct*/ xfs_fs_eofblocks);
// ioctl!(readwrite xfs_ioc_fsbulkstat with b'X', 101; /*struct*/ xfs_fsop_bulkreq);
// ioctl!(readwrite xfs_ioc_fsbulkstat_single with b'X', 102; /*struct*/ xfs_fsop_bulkreq);
// ioctl!(read xfs_ioc_fscounts with b'X', 113; /*struct*/ xfs_fsop_counts);
// ioctl!(read xfs_ioc_fsgeometry with b'X', 124; /*struct*/ xfs_fsop_geom);
// ioctl!(read xfs_ioc_fsgeometry_v1 with b'X', 100; /*struct*/ xfs_fsop_geom_v1);
// ioctl!(read xfs_ioc_fsgetxattr with b'X', 31; /*struct*/ fsxattr);
// ioctl!(read xfs_ioc_fsgetxattra with b'X', 45; /*struct*/ fsxattr);
// ioctl!(write xfs_ioc_fsgrowfsdata with b'X', 110; /*struct*/ xfs_growfs_data);
// ioctl!(write xfs_ioc_fsgrowfslog with b'X', 111; /*struct*/ xfs_growfs_log);
// ioctl!(write xfs_ioc_fsgrowfsrt with b'X', 112; /*struct*/ xfs_growfs_rt);
// ioctl!(readwrite xfs_ioc_fsinumbers with b'X', 103; /*struct*/ xfs_fsop_bulkreq);
// ioctl!(write xfs_ioc_fssetdm with b'X', 39; /*struct*/ fsdmidata);
// ioctl!(write xfs_ioc_fssetdm_by_handle with b'X', 121; /*struct*/ xfs_fsop_setdm_handlereq);
// ioctl!(write xfs_ioc_fssetxattr with b'X', 32; /*struct*/ fsxattr);
// ioctl!(readwrite xfs_ioc_getbmap with b'X', 38; /*struct*/ getbmap);
// ioctl!(readwrite xfs_ioc_getbmapa with b'X', 44; /*struct*/ getbmap);
// ioctl!(readwrite xfs_ioc_getbmapx with b'X', 56; /*struct*/ getbmap);
ioctl!(read xfs_ioc_getversion with b'v', 1; ::std::os::raw::c_long);
ioctl!(read xfs_ioc_getxflags with b'f', 1; ::std::os::raw::c_long);
// ioctl!(read xfs_ioc_get_resblks with b'X', 115; /*struct*/ xfs_fsop_resblks);
ioctl!(read xfs_ioc_goingdown with b'X', 125; u32);
// ioctl!(readwrite xfs_ioc_open_by_handle with b'X', 107; /*struct*/ xfs_fsop_handlereq);
// ioctl!(readwrite xfs_ioc_path_to_fshandle with b'X', 104; /*struct*/ xfs_fsop_handlereq);
// ioctl!(readwrite xfs_ioc_path_to_handle with b'X', 105; /*struct*/ xfs_fsop_handlereq);
// ioctl!(readwrite xfs_ioc_readlink_by_handle with b'X', 108; /*struct*/ xfs_fsop_handlereq);
// ioctl!(write xfs_ioc_resvsp with b'X', 40; /*struct*/ xfs_flock64);
// ioctl!(write xfs_ioc_resvsp64 with b'X', 42; /*struct*/ xfs_flock64);
ioctl!(write xfs_ioc_setxflags with b'f', 2; ::std::os::raw::c_long);
// ioctl!(readwrite xfs_ioc_set_resblks with b'X', 114; /*struct*/ xfs_fsop_resblks);
// ioctl!(readwrite xfs_ioc_swapext with b'X', 109; /*struct*/ xfs_swapext);
ioctl!(readwrite xfs_ioc_thaw with b'X', 120; ::std::os::raw::c_int);
// ioctl!(write xfs_ioc_unresvsp with b'X', 41; /*struct*/ xfs_flock64);
// ioctl!(write xfs_ioc_unresvsp64 with b'X', 43; /*struct*/ xfs_flock64);
// ioctl!(write xfs_ioc_zero_range with b'X', 57; /*struct*/ xfs_flock64);
ioctl!(none fioclex with 84, 81);
ioctl!(none cz_nboards with 77, 250);
ioctl!(none cz_boot_start with 77, 251);
ioctl!(none cz_boot_data with 77, 252);
ioctl!(none cz_boot_end with 77, 253);
ioctl!(none cz_test with 77, 254);
